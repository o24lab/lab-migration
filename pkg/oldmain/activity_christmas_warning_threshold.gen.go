// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package oldmain

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"migration/pkg/model"
)

func newActivityChristmasWarningThreshold(db *gorm.DB, opts ...gen.DOOption) activityChristmasWarningThreshold {
	_activityChristmasWarningThreshold := activityChristmasWarningThreshold{}

	_activityChristmasWarningThreshold.activityChristmasWarningThresholdDo.UseDB(db, opts...)
	_activityChristmasWarningThreshold.activityChristmasWarningThresholdDo.UseModel(&model.ActivityChristmasWarningThreshold{})

	tableName := _activityChristmasWarningThreshold.activityChristmasWarningThresholdDo.TableName()
	_activityChristmasWarningThreshold.ALL = field.NewAsterisk(tableName)
	_activityChristmasWarningThreshold.ID = field.NewInt64(tableName, "id")
	_activityChristmasWarningThreshold.WarningStatus = field.NewInt32(tableName, "warning_status")
	_activityChristmasWarningThreshold.DailyJackpotThreshold = field.NewFloat64(tableName, "daily_jackpot_threshold")
	_activityChristmasWarningThreshold.TotalBudgetThreshold = field.NewFloat64(tableName, "total_budget_threshold")
	_activityChristmasWarningThreshold.CreateAt = field.NewInt32(tableName, "create_at")
	_activityChristmasWarningThreshold.UpdateAt = field.NewInt32(tableName, "update_at")
	_activityChristmasWarningThreshold.OpUser = field.NewString(tableName, "op_user")

	_activityChristmasWarningThreshold.fillFieldMap()

	return _activityChristmasWarningThreshold
}

// activityChristmasWarningThreshold 圣诞节阈值预警表
type activityChristmasWarningThreshold struct {
	activityChristmasWarningThresholdDo

	ALL                   field.Asterisk
	ID                    field.Int64   // 自增主键
	WarningStatus         field.Int32   // 预警状态：1-预警开启，0-预警关闭
	DailyJackpotThreshold field.Float64 // 单日彩金上限告警阈值
	TotalBudgetThreshold  field.Float64 // 活动总预算告警阈值
	CreateAt              field.Int32   // 创建时间
	UpdateAt              field.Int32   // 修改时间
	OpUser                field.String  // 操作人

	fieldMap map[string]field.Expr
}

func (a activityChristmasWarningThreshold) Table(newTableName string) *activityChristmasWarningThreshold {
	a.activityChristmasWarningThresholdDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a activityChristmasWarningThreshold) As(alias string) *activityChristmasWarningThreshold {
	a.activityChristmasWarningThresholdDo.DO = *(a.activityChristmasWarningThresholdDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *activityChristmasWarningThreshold) updateTableName(table string) *activityChristmasWarningThreshold {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.WarningStatus = field.NewInt32(table, "warning_status")
	a.DailyJackpotThreshold = field.NewFloat64(table, "daily_jackpot_threshold")
	a.TotalBudgetThreshold = field.NewFloat64(table, "total_budget_threshold")
	a.CreateAt = field.NewInt32(table, "create_at")
	a.UpdateAt = field.NewInt32(table, "update_at")
	a.OpUser = field.NewString(table, "op_user")

	a.fillFieldMap()

	return a
}

func (a *activityChristmasWarningThreshold) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *activityChristmasWarningThreshold) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["id"] = a.ID
	a.fieldMap["warning_status"] = a.WarningStatus
	a.fieldMap["daily_jackpot_threshold"] = a.DailyJackpotThreshold
	a.fieldMap["total_budget_threshold"] = a.TotalBudgetThreshold
	a.fieldMap["create_at"] = a.CreateAt
	a.fieldMap["update_at"] = a.UpdateAt
	a.fieldMap["op_user"] = a.OpUser
}

func (a activityChristmasWarningThreshold) clone(db *gorm.DB) activityChristmasWarningThreshold {
	a.activityChristmasWarningThresholdDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a activityChristmasWarningThreshold) replaceDB(db *gorm.DB) activityChristmasWarningThreshold {
	a.activityChristmasWarningThresholdDo.ReplaceDB(db)
	return a
}

type activityChristmasWarningThresholdDo struct{ gen.DO }

func (a activityChristmasWarningThresholdDo) Debug() *activityChristmasWarningThresholdDo {
	return a.withDO(a.DO.Debug())
}

func (a activityChristmasWarningThresholdDo) WithContext(ctx context.Context) *activityChristmasWarningThresholdDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a activityChristmasWarningThresholdDo) ReadDB() *activityChristmasWarningThresholdDo {
	return a.Clauses(dbresolver.Read)
}

func (a activityChristmasWarningThresholdDo) WriteDB() *activityChristmasWarningThresholdDo {
	return a.Clauses(dbresolver.Write)
}

func (a activityChristmasWarningThresholdDo) Session(config *gorm.Session) *activityChristmasWarningThresholdDo {
	return a.withDO(a.DO.Session(config))
}

func (a activityChristmasWarningThresholdDo) Clauses(conds ...clause.Expression) *activityChristmasWarningThresholdDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a activityChristmasWarningThresholdDo) Returning(value interface{}, columns ...string) *activityChristmasWarningThresholdDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a activityChristmasWarningThresholdDo) Not(conds ...gen.Condition) *activityChristmasWarningThresholdDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a activityChristmasWarningThresholdDo) Or(conds ...gen.Condition) *activityChristmasWarningThresholdDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a activityChristmasWarningThresholdDo) Select(conds ...field.Expr) *activityChristmasWarningThresholdDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a activityChristmasWarningThresholdDo) Where(conds ...gen.Condition) *activityChristmasWarningThresholdDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a activityChristmasWarningThresholdDo) Order(conds ...field.Expr) *activityChristmasWarningThresholdDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a activityChristmasWarningThresholdDo) Distinct(cols ...field.Expr) *activityChristmasWarningThresholdDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a activityChristmasWarningThresholdDo) Omit(cols ...field.Expr) *activityChristmasWarningThresholdDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a activityChristmasWarningThresholdDo) Join(table schema.Tabler, on ...field.Expr) *activityChristmasWarningThresholdDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a activityChristmasWarningThresholdDo) LeftJoin(table schema.Tabler, on ...field.Expr) *activityChristmasWarningThresholdDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a activityChristmasWarningThresholdDo) RightJoin(table schema.Tabler, on ...field.Expr) *activityChristmasWarningThresholdDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a activityChristmasWarningThresholdDo) Group(cols ...field.Expr) *activityChristmasWarningThresholdDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a activityChristmasWarningThresholdDo) Having(conds ...gen.Condition) *activityChristmasWarningThresholdDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a activityChristmasWarningThresholdDo) Limit(limit int) *activityChristmasWarningThresholdDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a activityChristmasWarningThresholdDo) Offset(offset int) *activityChristmasWarningThresholdDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a activityChristmasWarningThresholdDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *activityChristmasWarningThresholdDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a activityChristmasWarningThresholdDo) Unscoped() *activityChristmasWarningThresholdDo {
	return a.withDO(a.DO.Unscoped())
}

func (a activityChristmasWarningThresholdDo) Create(values ...*model.ActivityChristmasWarningThreshold) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a activityChristmasWarningThresholdDo) CreateInBatches(values []*model.ActivityChristmasWarningThreshold, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a activityChristmasWarningThresholdDo) Save(values ...*model.ActivityChristmasWarningThreshold) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a activityChristmasWarningThresholdDo) First() (*model.ActivityChristmasWarningThreshold, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityChristmasWarningThreshold), nil
	}
}

func (a activityChristmasWarningThresholdDo) Take() (*model.ActivityChristmasWarningThreshold, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityChristmasWarningThreshold), nil
	}
}

func (a activityChristmasWarningThresholdDo) Last() (*model.ActivityChristmasWarningThreshold, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityChristmasWarningThreshold), nil
	}
}

func (a activityChristmasWarningThresholdDo) Find() ([]*model.ActivityChristmasWarningThreshold, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActivityChristmasWarningThreshold), err
}

func (a activityChristmasWarningThresholdDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityChristmasWarningThreshold, err error) {
	buf := make([]*model.ActivityChristmasWarningThreshold, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a activityChristmasWarningThresholdDo) FindInBatches(result *[]*model.ActivityChristmasWarningThreshold, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a activityChristmasWarningThresholdDo) Attrs(attrs ...field.AssignExpr) *activityChristmasWarningThresholdDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a activityChristmasWarningThresholdDo) Assign(attrs ...field.AssignExpr) *activityChristmasWarningThresholdDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a activityChristmasWarningThresholdDo) Joins(fields ...field.RelationField) *activityChristmasWarningThresholdDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a activityChristmasWarningThresholdDo) Preload(fields ...field.RelationField) *activityChristmasWarningThresholdDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a activityChristmasWarningThresholdDo) FirstOrInit() (*model.ActivityChristmasWarningThreshold, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityChristmasWarningThreshold), nil
	}
}

func (a activityChristmasWarningThresholdDo) FirstOrCreate() (*model.ActivityChristmasWarningThreshold, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityChristmasWarningThreshold), nil
	}
}

func (a activityChristmasWarningThresholdDo) FindByPage(offset int, limit int) (result []*model.ActivityChristmasWarningThreshold, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a activityChristmasWarningThresholdDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a activityChristmasWarningThresholdDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a activityChristmasWarningThresholdDo) Delete(models ...*model.ActivityChristmasWarningThreshold) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *activityChristmasWarningThresholdDo) withDO(do gen.Dao) *activityChristmasWarningThresholdDo {
	a.DO = *do.(*gen.DO)
	return a
}
