// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package oldmain

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"migration/pkg/model"
)

func newGameProvider(db *gorm.DB, opts ...gen.DOOption) gameProvider {
	_gameProvider := gameProvider{}

	_gameProvider.gameProviderDo.UseDB(db, opts...)
	_gameProvider.gameProviderDo.UseModel(&model.GameProvider{})

	tableName := _gameProvider.gameProviderDo.TableName()
	_gameProvider.ALL = field.NewAsterisk(tableName)
	_gameProvider.ID = field.NewInt32(tableName, "id")
	_gameProvider.Code = field.NewString(tableName, "code")
	_gameProvider.Name = field.NewString(tableName, "name")
	_gameProvider.Icon = field.NewString(tableName, "icon")
	_gameProvider.Config = field.NewString(tableName, "config")
	_gameProvider.Sort = field.NewInt32(tableName, "sort")
	_gameProvider.ConfigStatus = field.NewInt32(tableName, "config_status")
	_gameProvider.CreatedAt = field.NewInt32(tableName, "created_at")
	_gameProvider.UpdatedAt = field.NewInt32(tableName, "updated_at")
	_gameProvider.CreatedBy = field.NewString(tableName, "created_by")
	_gameProvider.UpdatedBy = field.NewString(tableName, "updated_by")

	_gameProvider.fillFieldMap()

	return _gameProvider
}

// gameProvider 游戏供应商列表
type gameProvider struct {
	gameProviderDo

	ALL          field.Asterisk
	ID           field.Int32
	Code         field.String // 平台编码
	Name         field.String // 平台名称
	Icon         field.String
	Config       field.String // 配置信息
	Sort         field.Int32  // 排序: 从低到高
	ConfigStatus field.Int32  // 状态: 1-启用 0-停用
	CreatedAt    field.Int32
	UpdatedAt    field.Int32
	CreatedBy    field.String // 操作人姓名
	UpdatedBy    field.String // 最后更新人

	fieldMap map[string]field.Expr
}

func (g gameProvider) Table(newTableName string) *gameProvider {
	g.gameProviderDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gameProvider) As(alias string) *gameProvider {
	g.gameProviderDo.DO = *(g.gameProviderDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gameProvider) updateTableName(table string) *gameProvider {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt32(table, "id")
	g.Code = field.NewString(table, "code")
	g.Name = field.NewString(table, "name")
	g.Icon = field.NewString(table, "icon")
	g.Config = field.NewString(table, "config")
	g.Sort = field.NewInt32(table, "sort")
	g.ConfigStatus = field.NewInt32(table, "config_status")
	g.CreatedAt = field.NewInt32(table, "created_at")
	g.UpdatedAt = field.NewInt32(table, "updated_at")
	g.CreatedBy = field.NewString(table, "created_by")
	g.UpdatedBy = field.NewString(table, "updated_by")

	g.fillFieldMap()

	return g
}

func (g *gameProvider) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gameProvider) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 11)
	g.fieldMap["id"] = g.ID
	g.fieldMap["code"] = g.Code
	g.fieldMap["name"] = g.Name
	g.fieldMap["icon"] = g.Icon
	g.fieldMap["config"] = g.Config
	g.fieldMap["sort"] = g.Sort
	g.fieldMap["config_status"] = g.ConfigStatus
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["created_by"] = g.CreatedBy
	g.fieldMap["updated_by"] = g.UpdatedBy
}

func (g gameProvider) clone(db *gorm.DB) gameProvider {
	g.gameProviderDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gameProvider) replaceDB(db *gorm.DB) gameProvider {
	g.gameProviderDo.ReplaceDB(db)
	return g
}

type gameProviderDo struct{ gen.DO }

func (g gameProviderDo) Debug() *gameProviderDo {
	return g.withDO(g.DO.Debug())
}

func (g gameProviderDo) WithContext(ctx context.Context) *gameProviderDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gameProviderDo) ReadDB() *gameProviderDo {
	return g.Clauses(dbresolver.Read)
}

func (g gameProviderDo) WriteDB() *gameProviderDo {
	return g.Clauses(dbresolver.Write)
}

func (g gameProviderDo) Session(config *gorm.Session) *gameProviderDo {
	return g.withDO(g.DO.Session(config))
}

func (g gameProviderDo) Clauses(conds ...clause.Expression) *gameProviderDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gameProviderDo) Returning(value interface{}, columns ...string) *gameProviderDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gameProviderDo) Not(conds ...gen.Condition) *gameProviderDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gameProviderDo) Or(conds ...gen.Condition) *gameProviderDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gameProviderDo) Select(conds ...field.Expr) *gameProviderDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gameProviderDo) Where(conds ...gen.Condition) *gameProviderDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gameProviderDo) Order(conds ...field.Expr) *gameProviderDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gameProviderDo) Distinct(cols ...field.Expr) *gameProviderDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gameProviderDo) Omit(cols ...field.Expr) *gameProviderDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gameProviderDo) Join(table schema.Tabler, on ...field.Expr) *gameProviderDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gameProviderDo) LeftJoin(table schema.Tabler, on ...field.Expr) *gameProviderDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gameProviderDo) RightJoin(table schema.Tabler, on ...field.Expr) *gameProviderDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gameProviderDo) Group(cols ...field.Expr) *gameProviderDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gameProviderDo) Having(conds ...gen.Condition) *gameProviderDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gameProviderDo) Limit(limit int) *gameProviderDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gameProviderDo) Offset(offset int) *gameProviderDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gameProviderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *gameProviderDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gameProviderDo) Unscoped() *gameProviderDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gameProviderDo) Create(values ...*model.GameProvider) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gameProviderDo) CreateInBatches(values []*model.GameProvider, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gameProviderDo) Save(values ...*model.GameProvider) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gameProviderDo) First() (*model.GameProvider, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameProvider), nil
	}
}

func (g gameProviderDo) Take() (*model.GameProvider, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameProvider), nil
	}
}

func (g gameProviderDo) Last() (*model.GameProvider, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameProvider), nil
	}
}

func (g gameProviderDo) Find() ([]*model.GameProvider, error) {
	result, err := g.DO.Find()
	return result.([]*model.GameProvider), err
}

func (g gameProviderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GameProvider, err error) {
	buf := make([]*model.GameProvider, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gameProviderDo) FindInBatches(result *[]*model.GameProvider, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gameProviderDo) Attrs(attrs ...field.AssignExpr) *gameProviderDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gameProviderDo) Assign(attrs ...field.AssignExpr) *gameProviderDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gameProviderDo) Joins(fields ...field.RelationField) *gameProviderDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gameProviderDo) Preload(fields ...field.RelationField) *gameProviderDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gameProviderDo) FirstOrInit() (*model.GameProvider, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameProvider), nil
	}
}

func (g gameProviderDo) FirstOrCreate() (*model.GameProvider, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameProvider), nil
	}
}

func (g gameProviderDo) FindByPage(offset int, limit int) (result []*model.GameProvider, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gameProviderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gameProviderDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gameProviderDo) Delete(models ...*model.GameProvider) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gameProviderDo) withDO(do gen.Dao) *gameProviderDo {
	g.DO = *do.(*gen.DO)
	return g
}
