// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package oldmain

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"migration/pkg/model"
)

func newWinUserKycBac(db *gorm.DB, opts ...gen.DOOption) winUserKycBac {
	_winUserKycBac := winUserKycBac{}

	_winUserKycBac.winUserKycBacDo.UseDB(db, opts...)
	_winUserKycBac.winUserKycBacDo.UseModel(&model.WinUserKycBac{})

	tableName := _winUserKycBac.winUserKycBacDo.TableName()
	_winUserKycBac.ALL = field.NewAsterisk(tableName)
	_winUserKycBac.ID = field.NewInt32(tableName, "id")
	_winUserKycBac.UID = field.NewInt32(tableName, "uid")
	_winUserKycBac.Username = field.NewString(tableName, "username")
	_winUserKycBac.FirstName = field.NewString(tableName, "first_name")
	_winUserKycBac.MiddleName = field.NewString(tableName, "middle_name")
	_winUserKycBac.LastName = field.NewString(tableName, "last_name")
	_winUserKycBac.Birthday = field.NewInt32(tableName, "birthday")
	_winUserKycBac.ImgFront = field.NewString(tableName, "img_front")
	_winUserKycBac.ImgBack = field.NewString(tableName, "img_back")
	_winUserKycBac.IDType = field.NewInt32(tableName, "id_type")
	_winUserKycBac.IDNumber = field.NewString(tableName, "id_number")
	_winUserKycBac.Status = field.NewInt32(tableName, "status")
	_winUserKycBac.Reason = field.NewString(tableName, "reason")
	_winUserKycBac.Remark = field.NewString(tableName, "remark")
	_winUserKycBac.AuditUsername = field.NewString(tableName, "audit_username")
	_winUserKycBac.AuditAt = field.NewInt32(tableName, "audit_at")
	_winUserKycBac.CreatedAt = field.NewInt32(tableName, "created_at")
	_winUserKycBac.UpdatedAt = field.NewInt32(tableName, "updated_at")
	_winUserKycBac.OperatorName = field.NewString(tableName, "operator_name")
	_winUserKycBac.Nationality = field.NewString(tableName, "nationality")
	_winUserKycBac.PlaceOfBirth = field.NewString(tableName, "place_of_birth")
	_winUserKycBac.CurrentAddress = field.NewString(tableName, "current_address")
	_winUserKycBac.PermanentAddress = field.NewString(tableName, "permanent_address")
	_winUserKycBac.EmploymentType = field.NewString(tableName, "employment_type")
	_winUserKycBac.MainSourceOfFunds = field.NewString(tableName, "main_source_of_funds")
	_winUserKycBac.RelationStore = field.NewString(tableName, "relation_store")
	_winUserKycBac.Age = field.NewInt32(tableName, "age")
	_winUserKycBac.Gender = field.NewInt32(tableName, "gender")
	_winUserKycBac.CivilStatus = field.NewInt32(tableName, "civil_status")
	_winUserKycBac.EmailAddress = field.NewString(tableName, "email_address")
	_winUserKycBac.ContactNo = field.NewString(tableName, "contact_no")
	_winUserKycBac.ImgHandheld = field.NewString(tableName, "img_handheld")
	_winUserKycBac.City = field.NewString(tableName, "city")
	_winUserKycBac.Province = field.NewString(tableName, "province")
	_winUserKycBac.ReferenceID = field.NewString(tableName, "reference_id")
	_winUserKycBac.ReferenceURL = field.NewString(tableName, "reference_url")
	_winUserKycBac.DeclinedReason = field.NewString(tableName, "declined_reason")
	_winUserKycBac.CallbackJSON = field.NewString(tableName, "callback_json")
	_winUserKycBac.Occupation = field.NewString(tableName, "occupation")

	_winUserKycBac.fillFieldMap()

	return _winUserKycBac
}

// winUserKycBac kyc表
type winUserKycBac struct {
	winUserKycBacDo

	ALL               field.Asterisk
	ID                field.Int32
	UID               field.Int32  // uid
	Username          field.String // 用户名
	FirstName         field.String // first_name
	MiddleName        field.String // middle_name
	LastName          field.String // last_name
	Birthday          field.Int32  // birthday
	ImgFront          field.String // 证件正面图片地址
	ImgBack           field.String // 证件背面图片地址
	IDType            field.Int32  // 证件类型:1-身份证 2-护照 3-驾照
	IDNumber          field.String // 证件编号
	Status            field.Int32  // 状态:1-待审核 2-通过 3-拒绝
	Reason            field.String // 拒绝原因
	Remark            field.String // 备注
	AuditUsername     field.String // 审核人
	AuditAt           field.Int32  // 审核时间
	CreatedAt         field.Int32
	UpdatedAt         field.Int32
	OperatorName      field.String // 操作人姓名
	Nationality       field.String // 国籍
	PlaceOfBirth      field.String // 出生地
	CurrentAddress    field.String // 当前地址
	PermanentAddress  field.String // 长期地址
	EmploymentType    field.String // 工作性质1,Government Employee 2,OFW 3,Private Sector Employee 4,Self-Employed 5,Student 6,Unemployed
	MainSourceOfFunds field.String // 收入来源1，Allowance/Pension/Stipend/Honoraria2，Campaign Funds/Donation3，Cash on Hand4，Commission or Incentives5，E-Money6，Income from Business/Profession7，Inheritance8，Investment9，Loan Availments10，Personal Savings11，Proceeds of Personal or Real property sale12，Remittance from relatives13，Rental Income14，Salary
	RelationStore     field.String // 关联商铺
	Age               field.Int32  // 年龄
	Gender            field.Int32  // 性别：1.Male 0.Female 2.Prefer not to say
	CivilStatus       field.Int32  // 婚姻状态：1. Single2. Married 3. Divorced 4. Widowed
	EmailAddress      field.String // 邮箱地址
	ContactNo         field.String // 联系方式
	ImgHandheld       field.String // 手持证件照
	City              field.String // 当前所在城市
	Province          field.String // 当前所在省
	ReferenceID       field.String // 三方订单ID
	ReferenceURL      field.String // 三方kyc URL
	DeclinedReason    field.String // 三方拒绝理由
	CallbackJSON      field.String // 三方验证回调
	Occupation        field.String // 职业

	fieldMap map[string]field.Expr
}

func (w winUserKycBac) Table(newTableName string) *winUserKycBac {
	w.winUserKycBacDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winUserKycBac) As(alias string) *winUserKycBac {
	w.winUserKycBacDo.DO = *(w.winUserKycBacDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winUserKycBac) updateTableName(table string) *winUserKycBac {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt32(table, "id")
	w.UID = field.NewInt32(table, "uid")
	w.Username = field.NewString(table, "username")
	w.FirstName = field.NewString(table, "first_name")
	w.MiddleName = field.NewString(table, "middle_name")
	w.LastName = field.NewString(table, "last_name")
	w.Birthday = field.NewInt32(table, "birthday")
	w.ImgFront = field.NewString(table, "img_front")
	w.ImgBack = field.NewString(table, "img_back")
	w.IDType = field.NewInt32(table, "id_type")
	w.IDNumber = field.NewString(table, "id_number")
	w.Status = field.NewInt32(table, "status")
	w.Reason = field.NewString(table, "reason")
	w.Remark = field.NewString(table, "remark")
	w.AuditUsername = field.NewString(table, "audit_username")
	w.AuditAt = field.NewInt32(table, "audit_at")
	w.CreatedAt = field.NewInt32(table, "created_at")
	w.UpdatedAt = field.NewInt32(table, "updated_at")
	w.OperatorName = field.NewString(table, "operator_name")
	w.Nationality = field.NewString(table, "nationality")
	w.PlaceOfBirth = field.NewString(table, "place_of_birth")
	w.CurrentAddress = field.NewString(table, "current_address")
	w.PermanentAddress = field.NewString(table, "permanent_address")
	w.EmploymentType = field.NewString(table, "employment_type")
	w.MainSourceOfFunds = field.NewString(table, "main_source_of_funds")
	w.RelationStore = field.NewString(table, "relation_store")
	w.Age = field.NewInt32(table, "age")
	w.Gender = field.NewInt32(table, "gender")
	w.CivilStatus = field.NewInt32(table, "civil_status")
	w.EmailAddress = field.NewString(table, "email_address")
	w.ContactNo = field.NewString(table, "contact_no")
	w.ImgHandheld = field.NewString(table, "img_handheld")
	w.City = field.NewString(table, "city")
	w.Province = field.NewString(table, "province")
	w.ReferenceID = field.NewString(table, "reference_id")
	w.ReferenceURL = field.NewString(table, "reference_url")
	w.DeclinedReason = field.NewString(table, "declined_reason")
	w.CallbackJSON = field.NewString(table, "callback_json")
	w.Occupation = field.NewString(table, "occupation")

	w.fillFieldMap()

	return w
}

func (w *winUserKycBac) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winUserKycBac) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 39)
	w.fieldMap["id"] = w.ID
	w.fieldMap["uid"] = w.UID
	w.fieldMap["username"] = w.Username
	w.fieldMap["first_name"] = w.FirstName
	w.fieldMap["middle_name"] = w.MiddleName
	w.fieldMap["last_name"] = w.LastName
	w.fieldMap["birthday"] = w.Birthday
	w.fieldMap["img_front"] = w.ImgFront
	w.fieldMap["img_back"] = w.ImgBack
	w.fieldMap["id_type"] = w.IDType
	w.fieldMap["id_number"] = w.IDNumber
	w.fieldMap["status"] = w.Status
	w.fieldMap["reason"] = w.Reason
	w.fieldMap["remark"] = w.Remark
	w.fieldMap["audit_username"] = w.AuditUsername
	w.fieldMap["audit_at"] = w.AuditAt
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["operator_name"] = w.OperatorName
	w.fieldMap["nationality"] = w.Nationality
	w.fieldMap["place_of_birth"] = w.PlaceOfBirth
	w.fieldMap["current_address"] = w.CurrentAddress
	w.fieldMap["permanent_address"] = w.PermanentAddress
	w.fieldMap["employment_type"] = w.EmploymentType
	w.fieldMap["main_source_of_funds"] = w.MainSourceOfFunds
	w.fieldMap["relation_store"] = w.RelationStore
	w.fieldMap["age"] = w.Age
	w.fieldMap["gender"] = w.Gender
	w.fieldMap["civil_status"] = w.CivilStatus
	w.fieldMap["email_address"] = w.EmailAddress
	w.fieldMap["contact_no"] = w.ContactNo
	w.fieldMap["img_handheld"] = w.ImgHandheld
	w.fieldMap["city"] = w.City
	w.fieldMap["province"] = w.Province
	w.fieldMap["reference_id"] = w.ReferenceID
	w.fieldMap["reference_url"] = w.ReferenceURL
	w.fieldMap["declined_reason"] = w.DeclinedReason
	w.fieldMap["callback_json"] = w.CallbackJSON
	w.fieldMap["occupation"] = w.Occupation
}

func (w winUserKycBac) clone(db *gorm.DB) winUserKycBac {
	w.winUserKycBacDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winUserKycBac) replaceDB(db *gorm.DB) winUserKycBac {
	w.winUserKycBacDo.ReplaceDB(db)
	return w
}

type winUserKycBacDo struct{ gen.DO }

func (w winUserKycBacDo) Debug() *winUserKycBacDo {
	return w.withDO(w.DO.Debug())
}

func (w winUserKycBacDo) WithContext(ctx context.Context) *winUserKycBacDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winUserKycBacDo) ReadDB() *winUserKycBacDo {
	return w.Clauses(dbresolver.Read)
}

func (w winUserKycBacDo) WriteDB() *winUserKycBacDo {
	return w.Clauses(dbresolver.Write)
}

func (w winUserKycBacDo) Session(config *gorm.Session) *winUserKycBacDo {
	return w.withDO(w.DO.Session(config))
}

func (w winUserKycBacDo) Clauses(conds ...clause.Expression) *winUserKycBacDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winUserKycBacDo) Returning(value interface{}, columns ...string) *winUserKycBacDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winUserKycBacDo) Not(conds ...gen.Condition) *winUserKycBacDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winUserKycBacDo) Or(conds ...gen.Condition) *winUserKycBacDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winUserKycBacDo) Select(conds ...field.Expr) *winUserKycBacDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winUserKycBacDo) Where(conds ...gen.Condition) *winUserKycBacDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winUserKycBacDo) Order(conds ...field.Expr) *winUserKycBacDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winUserKycBacDo) Distinct(cols ...field.Expr) *winUserKycBacDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winUserKycBacDo) Omit(cols ...field.Expr) *winUserKycBacDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winUserKycBacDo) Join(table schema.Tabler, on ...field.Expr) *winUserKycBacDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winUserKycBacDo) LeftJoin(table schema.Tabler, on ...field.Expr) *winUserKycBacDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winUserKycBacDo) RightJoin(table schema.Tabler, on ...field.Expr) *winUserKycBacDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winUserKycBacDo) Group(cols ...field.Expr) *winUserKycBacDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winUserKycBacDo) Having(conds ...gen.Condition) *winUserKycBacDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winUserKycBacDo) Limit(limit int) *winUserKycBacDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winUserKycBacDo) Offset(offset int) *winUserKycBacDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winUserKycBacDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *winUserKycBacDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winUserKycBacDo) Unscoped() *winUserKycBacDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winUserKycBacDo) Create(values ...*model.WinUserKycBac) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winUserKycBacDo) CreateInBatches(values []*model.WinUserKycBac, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winUserKycBacDo) Save(values ...*model.WinUserKycBac) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winUserKycBacDo) First() (*model.WinUserKycBac, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserKycBac), nil
	}
}

func (w winUserKycBacDo) Take() (*model.WinUserKycBac, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserKycBac), nil
	}
}

func (w winUserKycBacDo) Last() (*model.WinUserKycBac, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserKycBac), nil
	}
}

func (w winUserKycBacDo) Find() ([]*model.WinUserKycBac, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinUserKycBac), err
}

func (w winUserKycBacDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinUserKycBac, err error) {
	buf := make([]*model.WinUserKycBac, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winUserKycBacDo) FindInBatches(result *[]*model.WinUserKycBac, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winUserKycBacDo) Attrs(attrs ...field.AssignExpr) *winUserKycBacDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winUserKycBacDo) Assign(attrs ...field.AssignExpr) *winUserKycBacDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winUserKycBacDo) Joins(fields ...field.RelationField) *winUserKycBacDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winUserKycBacDo) Preload(fields ...field.RelationField) *winUserKycBacDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winUserKycBacDo) FirstOrInit() (*model.WinUserKycBac, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserKycBac), nil
	}
}

func (w winUserKycBacDo) FirstOrCreate() (*model.WinUserKycBac, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserKycBac), nil
	}
}

func (w winUserKycBacDo) FindByPage(offset int, limit int) (result []*model.WinUserKycBac, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winUserKycBacDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winUserKycBacDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winUserKycBacDo) Delete(models ...*model.WinUserKycBac) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winUserKycBacDo) withDO(do gen.Dao) *winUserKycBacDo {
	w.DO = *do.(*gen.DO)
	return w
}
