// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package oldmain

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"migration/pkg/model"
)

func newGameType(db *gorm.DB, opts ...gen.DOOption) gameType {
	_gameType := gameType{}

	_gameType.gameTypeDo.UseDB(db, opts...)
	_gameType.gameTypeDo.UseModel(&model.GameType{})

	tableName := _gameType.gameTypeDo.TableName()
	_gameType.ALL = field.NewAsterisk(tableName)
	_gameType.ID = field.NewInt32(tableName, "id")
	_gameType.Name = field.NewString(tableName, "name")
	_gameType.Status = field.NewInt32(tableName, "status")
	_gameType.CreatedAt = field.NewInt32(tableName, "created_at")
	_gameType.UpdatedAt = field.NewInt32(tableName, "updated_at")
	_gameType.CreatedBy = field.NewString(tableName, "created_by")
	_gameType.UpdatedBy = field.NewString(tableName, "updated_by")
	_gameType.Sort = field.NewInt32(tableName, "sort")
	_gameType.Display = field.NewInt32(tableName, "display")

	_gameType.fillFieldMap()

	return _gameType
}

// gameType 自定义游戏类型列表
type gameType struct {
	gameTypeDo

	ALL       field.Asterisk
	ID        field.Int32  // 类型:1-体育 2-电子 3-真人 4-捕鱼 5-棋牌 6-电竞 7-彩票 8-动物 9-快速 10-技能 11-table game
	Name      field.String // 自定类型名称
	Status    field.Int32  // 状态: 1-启用 0-停用
	CreatedAt field.Int32
	UpdatedAt field.Int32
	CreatedBy field.String // 操作人姓名
	UpdatedBy field.String // 最后更新人
	Sort      field.Int32  // 排序: 从低到高
	Display   field.Int32  // 显示标志: 1-显示 0-隐藏

	fieldMap map[string]field.Expr
}

func (g gameType) Table(newTableName string) *gameType {
	g.gameTypeDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gameType) As(alias string) *gameType {
	g.gameTypeDo.DO = *(g.gameTypeDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gameType) updateTableName(table string) *gameType {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt32(table, "id")
	g.Name = field.NewString(table, "name")
	g.Status = field.NewInt32(table, "status")
	g.CreatedAt = field.NewInt32(table, "created_at")
	g.UpdatedAt = field.NewInt32(table, "updated_at")
	g.CreatedBy = field.NewString(table, "created_by")
	g.UpdatedBy = field.NewString(table, "updated_by")
	g.Sort = field.NewInt32(table, "sort")
	g.Display = field.NewInt32(table, "display")

	g.fillFieldMap()

	return g
}

func (g *gameType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gameType) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 9)
	g.fieldMap["id"] = g.ID
	g.fieldMap["name"] = g.Name
	g.fieldMap["status"] = g.Status
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["created_by"] = g.CreatedBy
	g.fieldMap["updated_by"] = g.UpdatedBy
	g.fieldMap["sort"] = g.Sort
	g.fieldMap["display"] = g.Display
}

func (g gameType) clone(db *gorm.DB) gameType {
	g.gameTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gameType) replaceDB(db *gorm.DB) gameType {
	g.gameTypeDo.ReplaceDB(db)
	return g
}

type gameTypeDo struct{ gen.DO }

func (g gameTypeDo) Debug() *gameTypeDo {
	return g.withDO(g.DO.Debug())
}

func (g gameTypeDo) WithContext(ctx context.Context) *gameTypeDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gameTypeDo) ReadDB() *gameTypeDo {
	return g.Clauses(dbresolver.Read)
}

func (g gameTypeDo) WriteDB() *gameTypeDo {
	return g.Clauses(dbresolver.Write)
}

func (g gameTypeDo) Session(config *gorm.Session) *gameTypeDo {
	return g.withDO(g.DO.Session(config))
}

func (g gameTypeDo) Clauses(conds ...clause.Expression) *gameTypeDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gameTypeDo) Returning(value interface{}, columns ...string) *gameTypeDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gameTypeDo) Not(conds ...gen.Condition) *gameTypeDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gameTypeDo) Or(conds ...gen.Condition) *gameTypeDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gameTypeDo) Select(conds ...field.Expr) *gameTypeDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gameTypeDo) Where(conds ...gen.Condition) *gameTypeDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gameTypeDo) Order(conds ...field.Expr) *gameTypeDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gameTypeDo) Distinct(cols ...field.Expr) *gameTypeDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gameTypeDo) Omit(cols ...field.Expr) *gameTypeDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gameTypeDo) Join(table schema.Tabler, on ...field.Expr) *gameTypeDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gameTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *gameTypeDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gameTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) *gameTypeDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gameTypeDo) Group(cols ...field.Expr) *gameTypeDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gameTypeDo) Having(conds ...gen.Condition) *gameTypeDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gameTypeDo) Limit(limit int) *gameTypeDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gameTypeDo) Offset(offset int) *gameTypeDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gameTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *gameTypeDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gameTypeDo) Unscoped() *gameTypeDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gameTypeDo) Create(values ...*model.GameType) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gameTypeDo) CreateInBatches(values []*model.GameType, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gameTypeDo) Save(values ...*model.GameType) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gameTypeDo) First() (*model.GameType, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameType), nil
	}
}

func (g gameTypeDo) Take() (*model.GameType, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameType), nil
	}
}

func (g gameTypeDo) Last() (*model.GameType, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameType), nil
	}
}

func (g gameTypeDo) Find() ([]*model.GameType, error) {
	result, err := g.DO.Find()
	return result.([]*model.GameType), err
}

func (g gameTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GameType, err error) {
	buf := make([]*model.GameType, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gameTypeDo) FindInBatches(result *[]*model.GameType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gameTypeDo) Attrs(attrs ...field.AssignExpr) *gameTypeDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gameTypeDo) Assign(attrs ...field.AssignExpr) *gameTypeDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gameTypeDo) Joins(fields ...field.RelationField) *gameTypeDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gameTypeDo) Preload(fields ...field.RelationField) *gameTypeDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gameTypeDo) FirstOrInit() (*model.GameType, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameType), nil
	}
}

func (g gameTypeDo) FirstOrCreate() (*model.GameType, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameType), nil
	}
}

func (g gameTypeDo) FindByPage(offset int, limit int) (result []*model.GameType, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gameTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gameTypeDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gameTypeDo) Delete(models ...*model.GameType) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gameTypeDo) withDO(do gen.Dao) *gameTypeDo {
	g.DO = *do.(*gen.DO)
	return g
}
