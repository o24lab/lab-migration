// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package oldmain

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"migration/pkg/model"
)

func newWinUserOnline(db *gorm.DB, opts ...gen.DOOption) winUserOnline {
	_winUserOnline := winUserOnline{}

	_winUserOnline.winUserOnlineDo.UseDB(db, opts...)
	_winUserOnline.winUserOnlineDo.UseModel(&model.WinUserOnline{})

	tableName := _winUserOnline.winUserOnlineDo.TableName()
	_winUserOnline.ALL = field.NewAsterisk(tableName)
	_winUserOnline.ID = field.NewInt64(tableName, "id")
	_winUserOnline.TimeSum = field.NewInt32(tableName, "time_sum")
	_winUserOnline.OnlineSum = field.NewInt32(tableName, "online_sum")
	_winUserOnline.CreatedAt = field.NewInt32(tableName, "created_at")
	_winUserOnline.UpdatedAt = field.NewInt32(tableName, "updated_at")
	_winUserOnline.UpdatedUser = field.NewString(tableName, "updated_user")

	_winUserOnline.fillFieldMap()

	return _winUserOnline
}

// winUserOnline 每分钟在线会员人数表
type winUserOnline struct {
	winUserOnlineDo

	ALL         field.Asterisk
	ID          field.Int64  // 自增主键
	TimeSum     field.Int32  // 统计时间
	OnlineSum   field.Int32  // 在线人数
	CreatedAt   field.Int32  // 创建时间
	UpdatedAt   field.Int32  // 修改时间
	UpdatedUser field.String // 最后修改人

	fieldMap map[string]field.Expr
}

func (w winUserOnline) Table(newTableName string) *winUserOnline {
	w.winUserOnlineDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winUserOnline) As(alias string) *winUserOnline {
	w.winUserOnlineDo.DO = *(w.winUserOnlineDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winUserOnline) updateTableName(table string) *winUserOnline {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.TimeSum = field.NewInt32(table, "time_sum")
	w.OnlineSum = field.NewInt32(table, "online_sum")
	w.CreatedAt = field.NewInt32(table, "created_at")
	w.UpdatedAt = field.NewInt32(table, "updated_at")
	w.UpdatedUser = field.NewString(table, "updated_user")

	w.fillFieldMap()

	return w
}

func (w *winUserOnline) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winUserOnline) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 6)
	w.fieldMap["id"] = w.ID
	w.fieldMap["time_sum"] = w.TimeSum
	w.fieldMap["online_sum"] = w.OnlineSum
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["updated_user"] = w.UpdatedUser
}

func (w winUserOnline) clone(db *gorm.DB) winUserOnline {
	w.winUserOnlineDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winUserOnline) replaceDB(db *gorm.DB) winUserOnline {
	w.winUserOnlineDo.ReplaceDB(db)
	return w
}

type winUserOnlineDo struct{ gen.DO }

func (w winUserOnlineDo) Debug() *winUserOnlineDo {
	return w.withDO(w.DO.Debug())
}

func (w winUserOnlineDo) WithContext(ctx context.Context) *winUserOnlineDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winUserOnlineDo) ReadDB() *winUserOnlineDo {
	return w.Clauses(dbresolver.Read)
}

func (w winUserOnlineDo) WriteDB() *winUserOnlineDo {
	return w.Clauses(dbresolver.Write)
}

func (w winUserOnlineDo) Session(config *gorm.Session) *winUserOnlineDo {
	return w.withDO(w.DO.Session(config))
}

func (w winUserOnlineDo) Clauses(conds ...clause.Expression) *winUserOnlineDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winUserOnlineDo) Returning(value interface{}, columns ...string) *winUserOnlineDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winUserOnlineDo) Not(conds ...gen.Condition) *winUserOnlineDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winUserOnlineDo) Or(conds ...gen.Condition) *winUserOnlineDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winUserOnlineDo) Select(conds ...field.Expr) *winUserOnlineDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winUserOnlineDo) Where(conds ...gen.Condition) *winUserOnlineDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winUserOnlineDo) Order(conds ...field.Expr) *winUserOnlineDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winUserOnlineDo) Distinct(cols ...field.Expr) *winUserOnlineDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winUserOnlineDo) Omit(cols ...field.Expr) *winUserOnlineDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winUserOnlineDo) Join(table schema.Tabler, on ...field.Expr) *winUserOnlineDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winUserOnlineDo) LeftJoin(table schema.Tabler, on ...field.Expr) *winUserOnlineDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winUserOnlineDo) RightJoin(table schema.Tabler, on ...field.Expr) *winUserOnlineDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winUserOnlineDo) Group(cols ...field.Expr) *winUserOnlineDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winUserOnlineDo) Having(conds ...gen.Condition) *winUserOnlineDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winUserOnlineDo) Limit(limit int) *winUserOnlineDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winUserOnlineDo) Offset(offset int) *winUserOnlineDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winUserOnlineDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *winUserOnlineDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winUserOnlineDo) Unscoped() *winUserOnlineDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winUserOnlineDo) Create(values ...*model.WinUserOnline) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winUserOnlineDo) CreateInBatches(values []*model.WinUserOnline, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winUserOnlineDo) Save(values ...*model.WinUserOnline) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winUserOnlineDo) First() (*model.WinUserOnline, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserOnline), nil
	}
}

func (w winUserOnlineDo) Take() (*model.WinUserOnline, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserOnline), nil
	}
}

func (w winUserOnlineDo) Last() (*model.WinUserOnline, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserOnline), nil
	}
}

func (w winUserOnlineDo) Find() ([]*model.WinUserOnline, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinUserOnline), err
}

func (w winUserOnlineDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinUserOnline, err error) {
	buf := make([]*model.WinUserOnline, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winUserOnlineDo) FindInBatches(result *[]*model.WinUserOnline, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winUserOnlineDo) Attrs(attrs ...field.AssignExpr) *winUserOnlineDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winUserOnlineDo) Assign(attrs ...field.AssignExpr) *winUserOnlineDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winUserOnlineDo) Joins(fields ...field.RelationField) *winUserOnlineDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winUserOnlineDo) Preload(fields ...field.RelationField) *winUserOnlineDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winUserOnlineDo) FirstOrInit() (*model.WinUserOnline, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserOnline), nil
	}
}

func (w winUserOnlineDo) FirstOrCreate() (*model.WinUserOnline, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserOnline), nil
	}
}

func (w winUserOnlineDo) FindByPage(offset int, limit int) (result []*model.WinUserOnline, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winUserOnlineDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winUserOnlineDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winUserOnlineDo) Delete(models ...*model.WinUserOnline) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winUserOnlineDo) withDO(do gen.Dao) *winUserOnlineDo {
	w.DO = *do.(*gen.DO)
	return w
}
