// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package oldmain

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"migration/pkg/model"
)

func newWinUserRebateSet(db *gorm.DB, opts ...gen.DOOption) winUserRebateSet {
	_winUserRebateSet := winUserRebateSet{}

	_winUserRebateSet.winUserRebateSetDo.UseDB(db, opts...)
	_winUserRebateSet.winUserRebateSetDo.UseModel(&model.WinUserRebateSet{})

	tableName := _winUserRebateSet.winUserRebateSetDo.TableName()
	_winUserRebateSet.ALL = field.NewAsterisk(tableName)
	_winUserRebateSet.ID = field.NewInt64(tableName, "id")
	_winUserRebateSet.ValidAmountStart = field.NewFloat64(tableName, "valid_amount_start")
	_winUserRebateSet.ValidAmountEnd = field.NewFloat64(tableName, "valid_amount_end")
	_winUserRebateSet.RebatePercentageStart = field.NewFloat64(tableName, "rebate_percentage_start")
	_winUserRebateSet.RebatePercentageEnd = field.NewFloat64(tableName, "rebate_percentage_end")
	_winUserRebateSet.CreatedAt = field.NewInt32(tableName, "created_at")
	_winUserRebateSet.UpdatedAt = field.NewInt32(tableName, "updated_at")
	_winUserRebateSet.UpdatedUser = field.NewString(tableName, "updated_user")

	_winUserRebateSet.fillFieldMap()

	return _winUserRebateSet
}

// winUserRebateSet 天将红包反水设置表
type winUserRebateSet struct {
	winUserRebateSetDo

	ALL                   field.Asterisk
	ID                    field.Int64   // 自增主键
	ValidAmountStart      field.Float64 // 有效流水范围开始
	ValidAmountEnd        field.Float64 // 有效流水范围结束
	RebatePercentageStart field.Float64 // 反水比例范围开始
	RebatePercentageEnd   field.Float64 // 反水比例范围结束
	CreatedAt             field.Int32   // 创建时间
	UpdatedAt             field.Int32   // 修改时间
	UpdatedUser           field.String  // 最后修改人

	fieldMap map[string]field.Expr
}

func (w winUserRebateSet) Table(newTableName string) *winUserRebateSet {
	w.winUserRebateSetDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winUserRebateSet) As(alias string) *winUserRebateSet {
	w.winUserRebateSetDo.DO = *(w.winUserRebateSetDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winUserRebateSet) updateTableName(table string) *winUserRebateSet {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.ValidAmountStart = field.NewFloat64(table, "valid_amount_start")
	w.ValidAmountEnd = field.NewFloat64(table, "valid_amount_end")
	w.RebatePercentageStart = field.NewFloat64(table, "rebate_percentage_start")
	w.RebatePercentageEnd = field.NewFloat64(table, "rebate_percentage_end")
	w.CreatedAt = field.NewInt32(table, "created_at")
	w.UpdatedAt = field.NewInt32(table, "updated_at")
	w.UpdatedUser = field.NewString(table, "updated_user")

	w.fillFieldMap()

	return w
}

func (w *winUserRebateSet) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winUserRebateSet) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 8)
	w.fieldMap["id"] = w.ID
	w.fieldMap["valid_amount_start"] = w.ValidAmountStart
	w.fieldMap["valid_amount_end"] = w.ValidAmountEnd
	w.fieldMap["rebate_percentage_start"] = w.RebatePercentageStart
	w.fieldMap["rebate_percentage_end"] = w.RebatePercentageEnd
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["updated_user"] = w.UpdatedUser
}

func (w winUserRebateSet) clone(db *gorm.DB) winUserRebateSet {
	w.winUserRebateSetDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winUserRebateSet) replaceDB(db *gorm.DB) winUserRebateSet {
	w.winUserRebateSetDo.ReplaceDB(db)
	return w
}

type winUserRebateSetDo struct{ gen.DO }

func (w winUserRebateSetDo) Debug() *winUserRebateSetDo {
	return w.withDO(w.DO.Debug())
}

func (w winUserRebateSetDo) WithContext(ctx context.Context) *winUserRebateSetDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winUserRebateSetDo) ReadDB() *winUserRebateSetDo {
	return w.Clauses(dbresolver.Read)
}

func (w winUserRebateSetDo) WriteDB() *winUserRebateSetDo {
	return w.Clauses(dbresolver.Write)
}

func (w winUserRebateSetDo) Session(config *gorm.Session) *winUserRebateSetDo {
	return w.withDO(w.DO.Session(config))
}

func (w winUserRebateSetDo) Clauses(conds ...clause.Expression) *winUserRebateSetDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winUserRebateSetDo) Returning(value interface{}, columns ...string) *winUserRebateSetDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winUserRebateSetDo) Not(conds ...gen.Condition) *winUserRebateSetDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winUserRebateSetDo) Or(conds ...gen.Condition) *winUserRebateSetDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winUserRebateSetDo) Select(conds ...field.Expr) *winUserRebateSetDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winUserRebateSetDo) Where(conds ...gen.Condition) *winUserRebateSetDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winUserRebateSetDo) Order(conds ...field.Expr) *winUserRebateSetDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winUserRebateSetDo) Distinct(cols ...field.Expr) *winUserRebateSetDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winUserRebateSetDo) Omit(cols ...field.Expr) *winUserRebateSetDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winUserRebateSetDo) Join(table schema.Tabler, on ...field.Expr) *winUserRebateSetDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winUserRebateSetDo) LeftJoin(table schema.Tabler, on ...field.Expr) *winUserRebateSetDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winUserRebateSetDo) RightJoin(table schema.Tabler, on ...field.Expr) *winUserRebateSetDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winUserRebateSetDo) Group(cols ...field.Expr) *winUserRebateSetDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winUserRebateSetDo) Having(conds ...gen.Condition) *winUserRebateSetDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winUserRebateSetDo) Limit(limit int) *winUserRebateSetDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winUserRebateSetDo) Offset(offset int) *winUserRebateSetDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winUserRebateSetDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *winUserRebateSetDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winUserRebateSetDo) Unscoped() *winUserRebateSetDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winUserRebateSetDo) Create(values ...*model.WinUserRebateSet) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winUserRebateSetDo) CreateInBatches(values []*model.WinUserRebateSet, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winUserRebateSetDo) Save(values ...*model.WinUserRebateSet) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winUserRebateSetDo) First() (*model.WinUserRebateSet, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserRebateSet), nil
	}
}

func (w winUserRebateSetDo) Take() (*model.WinUserRebateSet, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserRebateSet), nil
	}
}

func (w winUserRebateSetDo) Last() (*model.WinUserRebateSet, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserRebateSet), nil
	}
}

func (w winUserRebateSetDo) Find() ([]*model.WinUserRebateSet, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinUserRebateSet), err
}

func (w winUserRebateSetDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinUserRebateSet, err error) {
	buf := make([]*model.WinUserRebateSet, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winUserRebateSetDo) FindInBatches(result *[]*model.WinUserRebateSet, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winUserRebateSetDo) Attrs(attrs ...field.AssignExpr) *winUserRebateSetDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winUserRebateSetDo) Assign(attrs ...field.AssignExpr) *winUserRebateSetDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winUserRebateSetDo) Joins(fields ...field.RelationField) *winUserRebateSetDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winUserRebateSetDo) Preload(fields ...field.RelationField) *winUserRebateSetDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winUserRebateSetDo) FirstOrInit() (*model.WinUserRebateSet, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserRebateSet), nil
	}
}

func (w winUserRebateSetDo) FirstOrCreate() (*model.WinUserRebateSet, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserRebateSet), nil
	}
}

func (w winUserRebateSetDo) FindByPage(offset int, limit int) (result []*model.WinUserRebateSet, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winUserRebateSetDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winUserRebateSetDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winUserRebateSetDo) Delete(models ...*model.WinUserRebateSet) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winUserRebateSetDo) withDO(do gen.Dao) *winUserRebateSetDo {
	w.DO = *do.(*gen.DO)
	return w
}
