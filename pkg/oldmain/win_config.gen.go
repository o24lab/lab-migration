// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package oldmain

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"migration/pkg/model"
)

func newWinConfig(db *gorm.DB, opts ...gen.DOOption) winConfig {
	_winConfig := winConfig{}

	_winConfig.winConfigDo.UseDB(db, opts...)
	_winConfig.winConfigDo.UseModel(&model.WinConfig{})

	tableName := _winConfig.winConfigDo.TableName()
	_winConfig.ALL = field.NewAsterisk(tableName)
	_winConfig.ID = field.NewInt32(tableName, "id")
	_winConfig.Title = field.NewString(tableName, "title")
	_winConfig.TitleZh = field.NewString(tableName, "title_zh")
	_winConfig.Value = field.NewString(tableName, "value")
	_winConfig.ShowApp = field.NewInt32(tableName, "show_app")
	_winConfig.CanModify = field.NewInt32(tableName, "can_modify")
	_winConfig.Status = field.NewInt32(tableName, "status")
	_winConfig.CreatedAt = field.NewInt32(tableName, "created_at")
	_winConfig.UpdatedAt = field.NewInt32(tableName, "updated_at")

	_winConfig.fillFieldMap()

	return _winConfig
}

// winConfig 系统配置
type winConfig struct {
	winConfigDo

	ALL       field.Asterisk
	ID        field.Int32
	Title     field.String // 名字
	TitleZh   field.String // 名字中文
	Value     field.String // 字段值
	ShowApp   field.Int32  // 类型:0-全部 1-WEB 2-后台 3-不显示
	CanModify field.Int32  // 支持修改:1-支持 0-不支持
	Status    field.Int32  // 是否启用:1-启用 0-不启用
	CreatedAt field.Int32
	UpdatedAt field.Int32

	fieldMap map[string]field.Expr
}

func (w winConfig) Table(newTableName string) *winConfig {
	w.winConfigDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winConfig) As(alias string) *winConfig {
	w.winConfigDo.DO = *(w.winConfigDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winConfig) updateTableName(table string) *winConfig {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt32(table, "id")
	w.Title = field.NewString(table, "title")
	w.TitleZh = field.NewString(table, "title_zh")
	w.Value = field.NewString(table, "value")
	w.ShowApp = field.NewInt32(table, "show_app")
	w.CanModify = field.NewInt32(table, "can_modify")
	w.Status = field.NewInt32(table, "status")
	w.CreatedAt = field.NewInt32(table, "created_at")
	w.UpdatedAt = field.NewInt32(table, "updated_at")

	w.fillFieldMap()

	return w
}

func (w *winConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winConfig) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 9)
	w.fieldMap["id"] = w.ID
	w.fieldMap["title"] = w.Title
	w.fieldMap["title_zh"] = w.TitleZh
	w.fieldMap["value"] = w.Value
	w.fieldMap["show_app"] = w.ShowApp
	w.fieldMap["can_modify"] = w.CanModify
	w.fieldMap["status"] = w.Status
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
}

func (w winConfig) clone(db *gorm.DB) winConfig {
	w.winConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winConfig) replaceDB(db *gorm.DB) winConfig {
	w.winConfigDo.ReplaceDB(db)
	return w
}

type winConfigDo struct{ gen.DO }

func (w winConfigDo) Debug() *winConfigDo {
	return w.withDO(w.DO.Debug())
}

func (w winConfigDo) WithContext(ctx context.Context) *winConfigDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winConfigDo) ReadDB() *winConfigDo {
	return w.Clauses(dbresolver.Read)
}

func (w winConfigDo) WriteDB() *winConfigDo {
	return w.Clauses(dbresolver.Write)
}

func (w winConfigDo) Session(config *gorm.Session) *winConfigDo {
	return w.withDO(w.DO.Session(config))
}

func (w winConfigDo) Clauses(conds ...clause.Expression) *winConfigDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winConfigDo) Returning(value interface{}, columns ...string) *winConfigDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winConfigDo) Not(conds ...gen.Condition) *winConfigDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winConfigDo) Or(conds ...gen.Condition) *winConfigDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winConfigDo) Select(conds ...field.Expr) *winConfigDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winConfigDo) Where(conds ...gen.Condition) *winConfigDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winConfigDo) Order(conds ...field.Expr) *winConfigDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winConfigDo) Distinct(cols ...field.Expr) *winConfigDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winConfigDo) Omit(cols ...field.Expr) *winConfigDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winConfigDo) Join(table schema.Tabler, on ...field.Expr) *winConfigDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) *winConfigDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) *winConfigDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winConfigDo) Group(cols ...field.Expr) *winConfigDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winConfigDo) Having(conds ...gen.Condition) *winConfigDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winConfigDo) Limit(limit int) *winConfigDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winConfigDo) Offset(offset int) *winConfigDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *winConfigDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winConfigDo) Unscoped() *winConfigDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winConfigDo) Create(values ...*model.WinConfig) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winConfigDo) CreateInBatches(values []*model.WinConfig, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winConfigDo) Save(values ...*model.WinConfig) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winConfigDo) First() (*model.WinConfig, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinConfig), nil
	}
}

func (w winConfigDo) Take() (*model.WinConfig, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinConfig), nil
	}
}

func (w winConfigDo) Last() (*model.WinConfig, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinConfig), nil
	}
}

func (w winConfigDo) Find() ([]*model.WinConfig, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinConfig), err
}

func (w winConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinConfig, err error) {
	buf := make([]*model.WinConfig, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winConfigDo) FindInBatches(result *[]*model.WinConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winConfigDo) Attrs(attrs ...field.AssignExpr) *winConfigDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winConfigDo) Assign(attrs ...field.AssignExpr) *winConfigDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winConfigDo) Joins(fields ...field.RelationField) *winConfigDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winConfigDo) Preload(fields ...field.RelationField) *winConfigDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winConfigDo) FirstOrInit() (*model.WinConfig, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinConfig), nil
	}
}

func (w winConfigDo) FirstOrCreate() (*model.WinConfig, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinConfig), nil
	}
}

func (w winConfigDo) FindByPage(offset int, limit int) (result []*model.WinConfig, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winConfigDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winConfigDo) Delete(models ...*model.WinConfig) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winConfigDo) withDO(do gen.Dao) *winConfigDo {
	w.DO = *do.(*gen.DO)
	return w
}
