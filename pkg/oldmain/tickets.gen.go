// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package oldmain

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"migration/pkg/model"
)

func newTicket(db *gorm.DB, opts ...gen.DOOption) ticket {
	_ticket := ticket{}

	_ticket.ticketDo.UseDB(db, opts...)
	_ticket.ticketDo.UseModel(&model.Ticket{})

	tableName := _ticket.ticketDo.TableName()
	_ticket.ALL = field.NewAsterisk(tableName)
	_ticket.ID = field.NewInt64(tableName, "id")
	_ticket.UID = field.NewInt32(tableName, "uid")
	_ticket.TicketID = field.NewString(tableName, "ticket_id")
	_ticket.EventType = field.NewInt32(tableName, "event_type")
	_ticket.CreatedAt = field.NewTime(tableName, "created_at")
	_ticket.Username = field.NewString(tableName, "username")
	_ticket.TicketStatus = field.NewInt32(tableName, "ticket_status")
	_ticket.SettleAt = field.NewTime(tableName, "settle_at")
	_ticket.Reward = field.NewFloat64(tableName, "reward")
	_ticket.RewardType = field.NewInt32(tableName, "reward_type")
	_ticket.OpUser = field.NewString(tableName, "op_user")

	_ticket.fillFieldMap()

	return _ticket
}

// ticket 抽奖卷记录表
type ticket struct {
	ticketDo

	ALL          field.Asterisk
	ID           field.Int64   // id自动递增
	UID          field.Int32   // 用户id
	TicketID     field.String  // 抽奖卷id
	EventType    field.Int32   // 事件类型 0:注册 1:充值 2:發起助力 3:kyc 4:bet指定触发 5: 助力或邀請成功
	CreatedAt    field.Time    // 创建时间
	Username     field.String  // 用户名
	TicketStatus field.Int32   // 奖券状态 0:未兑换, 1:已兑换, 2:已销毁
	SettleAt     field.Time    // 兑换时间 (兑换、销毁奖券的时间)
	Reward       field.Float64 // 奖品价值
	RewardType   field.Int32   // 奖品类型 1: 奖券上分,
	OpUser       field.String  // 操作人

	fieldMap map[string]field.Expr
}

func (t ticket) Table(newTableName string) *ticket {
	t.ticketDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t ticket) As(alias string) *ticket {
	t.ticketDo.DO = *(t.ticketDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *ticket) updateTableName(table string) *ticket {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.UID = field.NewInt32(table, "uid")
	t.TicketID = field.NewString(table, "ticket_id")
	t.EventType = field.NewInt32(table, "event_type")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.Username = field.NewString(table, "username")
	t.TicketStatus = field.NewInt32(table, "ticket_status")
	t.SettleAt = field.NewTime(table, "settle_at")
	t.Reward = field.NewFloat64(table, "reward")
	t.RewardType = field.NewInt32(table, "reward_type")
	t.OpUser = field.NewString(table, "op_user")

	t.fillFieldMap()

	return t
}

func (t *ticket) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *ticket) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 11)
	t.fieldMap["id"] = t.ID
	t.fieldMap["uid"] = t.UID
	t.fieldMap["ticket_id"] = t.TicketID
	t.fieldMap["event_type"] = t.EventType
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["username"] = t.Username
	t.fieldMap["ticket_status"] = t.TicketStatus
	t.fieldMap["settle_at"] = t.SettleAt
	t.fieldMap["reward"] = t.Reward
	t.fieldMap["reward_type"] = t.RewardType
	t.fieldMap["op_user"] = t.OpUser
}

func (t ticket) clone(db *gorm.DB) ticket {
	t.ticketDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t ticket) replaceDB(db *gorm.DB) ticket {
	t.ticketDo.ReplaceDB(db)
	return t
}

type ticketDo struct{ gen.DO }

func (t ticketDo) Debug() *ticketDo {
	return t.withDO(t.DO.Debug())
}

func (t ticketDo) WithContext(ctx context.Context) *ticketDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t ticketDo) ReadDB() *ticketDo {
	return t.Clauses(dbresolver.Read)
}

func (t ticketDo) WriteDB() *ticketDo {
	return t.Clauses(dbresolver.Write)
}

func (t ticketDo) Session(config *gorm.Session) *ticketDo {
	return t.withDO(t.DO.Session(config))
}

func (t ticketDo) Clauses(conds ...clause.Expression) *ticketDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t ticketDo) Returning(value interface{}, columns ...string) *ticketDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t ticketDo) Not(conds ...gen.Condition) *ticketDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t ticketDo) Or(conds ...gen.Condition) *ticketDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t ticketDo) Select(conds ...field.Expr) *ticketDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t ticketDo) Where(conds ...gen.Condition) *ticketDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t ticketDo) Order(conds ...field.Expr) *ticketDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t ticketDo) Distinct(cols ...field.Expr) *ticketDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t ticketDo) Omit(cols ...field.Expr) *ticketDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t ticketDo) Join(table schema.Tabler, on ...field.Expr) *ticketDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t ticketDo) LeftJoin(table schema.Tabler, on ...field.Expr) *ticketDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t ticketDo) RightJoin(table schema.Tabler, on ...field.Expr) *ticketDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t ticketDo) Group(cols ...field.Expr) *ticketDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t ticketDo) Having(conds ...gen.Condition) *ticketDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t ticketDo) Limit(limit int) *ticketDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t ticketDo) Offset(offset int) *ticketDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t ticketDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *ticketDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t ticketDo) Unscoped() *ticketDo {
	return t.withDO(t.DO.Unscoped())
}

func (t ticketDo) Create(values ...*model.Ticket) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t ticketDo) CreateInBatches(values []*model.Ticket, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t ticketDo) Save(values ...*model.Ticket) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t ticketDo) First() (*model.Ticket, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Ticket), nil
	}
}

func (t ticketDo) Take() (*model.Ticket, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Ticket), nil
	}
}

func (t ticketDo) Last() (*model.Ticket, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Ticket), nil
	}
}

func (t ticketDo) Find() ([]*model.Ticket, error) {
	result, err := t.DO.Find()
	return result.([]*model.Ticket), err
}

func (t ticketDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Ticket, err error) {
	buf := make([]*model.Ticket, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t ticketDo) FindInBatches(result *[]*model.Ticket, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t ticketDo) Attrs(attrs ...field.AssignExpr) *ticketDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t ticketDo) Assign(attrs ...field.AssignExpr) *ticketDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t ticketDo) Joins(fields ...field.RelationField) *ticketDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t ticketDo) Preload(fields ...field.RelationField) *ticketDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t ticketDo) FirstOrInit() (*model.Ticket, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Ticket), nil
	}
}

func (t ticketDo) FirstOrCreate() (*model.Ticket, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Ticket), nil
	}
}

func (t ticketDo) FindByPage(offset int, limit int) (result []*model.Ticket, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t ticketDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t ticketDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t ticketDo) Delete(models ...*model.Ticket) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *ticketDo) withDO(do gen.Dao) *ticketDo {
	t.DO = *do.(*gen.DO)
	return t
}
