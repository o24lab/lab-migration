// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package oldmain

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"migration/pkg/model"
)

func newWinUserOnlineReport(db *gorm.DB, opts ...gen.DOOption) winUserOnlineReport {
	_winUserOnlineReport := winUserOnlineReport{}

	_winUserOnlineReport.winUserOnlineReportDo.UseDB(db, opts...)
	_winUserOnlineReport.winUserOnlineReportDo.UseModel(&model.WinUserOnlineReport{})

	tableName := _winUserOnlineReport.winUserOnlineReportDo.TableName()
	_winUserOnlineReport.ALL = field.NewAsterisk(tableName)
	_winUserOnlineReport.ID = field.NewInt64(tableName, "id")
	_winUserOnlineReport.StartTime = field.NewInt32(tableName, "start_time")
	_winUserOnlineReport.EndTime = field.NewInt32(tableName, "end_time")
	_winUserOnlineReport.Category = field.NewInt32(tableName, "category")
	_winUserOnlineReport.OnlineAvg = field.NewInt32(tableName, "online_avg")
	_winUserOnlineReport.OnlineMax = field.NewInt32(tableName, "online_max")
	_winUserOnlineReport.OnlineMin = field.NewInt32(tableName, "online_min")
	_winUserOnlineReport.CreatedAt = field.NewInt32(tableName, "created_at")
	_winUserOnlineReport.UpdatedAt = field.NewInt32(tableName, "updated_at")
	_winUserOnlineReport.UpdatedUser = field.NewString(tableName, "updated_user")

	_winUserOnlineReport.fillFieldMap()

	return _winUserOnlineReport
}

// winUserOnlineReport 在线会员人数报表
type winUserOnlineReport struct {
	winUserOnlineReportDo

	ALL         field.Asterisk
	ID          field.Int64  // 自增主键
	StartTime   field.Int32  // 统计开始时间
	EndTime     field.Int32  // 统计结束时间
	Category    field.Int32  // 统计类型：0-时报，1-日报，2-月报
	OnlineAvg   field.Int32  // 平均在线人数
	OnlineMax   field.Int32  // 最高在线人数
	OnlineMin   field.Int32  // 最低在线人数
	CreatedAt   field.Int32  // 创建时间
	UpdatedAt   field.Int32  // 修改时间
	UpdatedUser field.String // 最后修改人

	fieldMap map[string]field.Expr
}

func (w winUserOnlineReport) Table(newTableName string) *winUserOnlineReport {
	w.winUserOnlineReportDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winUserOnlineReport) As(alias string) *winUserOnlineReport {
	w.winUserOnlineReportDo.DO = *(w.winUserOnlineReportDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winUserOnlineReport) updateTableName(table string) *winUserOnlineReport {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.StartTime = field.NewInt32(table, "start_time")
	w.EndTime = field.NewInt32(table, "end_time")
	w.Category = field.NewInt32(table, "category")
	w.OnlineAvg = field.NewInt32(table, "online_avg")
	w.OnlineMax = field.NewInt32(table, "online_max")
	w.OnlineMin = field.NewInt32(table, "online_min")
	w.CreatedAt = field.NewInt32(table, "created_at")
	w.UpdatedAt = field.NewInt32(table, "updated_at")
	w.UpdatedUser = field.NewString(table, "updated_user")

	w.fillFieldMap()

	return w
}

func (w *winUserOnlineReport) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winUserOnlineReport) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 10)
	w.fieldMap["id"] = w.ID
	w.fieldMap["start_time"] = w.StartTime
	w.fieldMap["end_time"] = w.EndTime
	w.fieldMap["category"] = w.Category
	w.fieldMap["online_avg"] = w.OnlineAvg
	w.fieldMap["online_max"] = w.OnlineMax
	w.fieldMap["online_min"] = w.OnlineMin
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["updated_user"] = w.UpdatedUser
}

func (w winUserOnlineReport) clone(db *gorm.DB) winUserOnlineReport {
	w.winUserOnlineReportDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winUserOnlineReport) replaceDB(db *gorm.DB) winUserOnlineReport {
	w.winUserOnlineReportDo.ReplaceDB(db)
	return w
}

type winUserOnlineReportDo struct{ gen.DO }

func (w winUserOnlineReportDo) Debug() *winUserOnlineReportDo {
	return w.withDO(w.DO.Debug())
}

func (w winUserOnlineReportDo) WithContext(ctx context.Context) *winUserOnlineReportDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winUserOnlineReportDo) ReadDB() *winUserOnlineReportDo {
	return w.Clauses(dbresolver.Read)
}

func (w winUserOnlineReportDo) WriteDB() *winUserOnlineReportDo {
	return w.Clauses(dbresolver.Write)
}

func (w winUserOnlineReportDo) Session(config *gorm.Session) *winUserOnlineReportDo {
	return w.withDO(w.DO.Session(config))
}

func (w winUserOnlineReportDo) Clauses(conds ...clause.Expression) *winUserOnlineReportDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winUserOnlineReportDo) Returning(value interface{}, columns ...string) *winUserOnlineReportDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winUserOnlineReportDo) Not(conds ...gen.Condition) *winUserOnlineReportDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winUserOnlineReportDo) Or(conds ...gen.Condition) *winUserOnlineReportDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winUserOnlineReportDo) Select(conds ...field.Expr) *winUserOnlineReportDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winUserOnlineReportDo) Where(conds ...gen.Condition) *winUserOnlineReportDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winUserOnlineReportDo) Order(conds ...field.Expr) *winUserOnlineReportDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winUserOnlineReportDo) Distinct(cols ...field.Expr) *winUserOnlineReportDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winUserOnlineReportDo) Omit(cols ...field.Expr) *winUserOnlineReportDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winUserOnlineReportDo) Join(table schema.Tabler, on ...field.Expr) *winUserOnlineReportDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winUserOnlineReportDo) LeftJoin(table schema.Tabler, on ...field.Expr) *winUserOnlineReportDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winUserOnlineReportDo) RightJoin(table schema.Tabler, on ...field.Expr) *winUserOnlineReportDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winUserOnlineReportDo) Group(cols ...field.Expr) *winUserOnlineReportDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winUserOnlineReportDo) Having(conds ...gen.Condition) *winUserOnlineReportDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winUserOnlineReportDo) Limit(limit int) *winUserOnlineReportDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winUserOnlineReportDo) Offset(offset int) *winUserOnlineReportDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winUserOnlineReportDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *winUserOnlineReportDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winUserOnlineReportDo) Unscoped() *winUserOnlineReportDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winUserOnlineReportDo) Create(values ...*model.WinUserOnlineReport) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winUserOnlineReportDo) CreateInBatches(values []*model.WinUserOnlineReport, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winUserOnlineReportDo) Save(values ...*model.WinUserOnlineReport) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winUserOnlineReportDo) First() (*model.WinUserOnlineReport, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserOnlineReport), nil
	}
}

func (w winUserOnlineReportDo) Take() (*model.WinUserOnlineReport, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserOnlineReport), nil
	}
}

func (w winUserOnlineReportDo) Last() (*model.WinUserOnlineReport, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserOnlineReport), nil
	}
}

func (w winUserOnlineReportDo) Find() ([]*model.WinUserOnlineReport, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinUserOnlineReport), err
}

func (w winUserOnlineReportDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinUserOnlineReport, err error) {
	buf := make([]*model.WinUserOnlineReport, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winUserOnlineReportDo) FindInBatches(result *[]*model.WinUserOnlineReport, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winUserOnlineReportDo) Attrs(attrs ...field.AssignExpr) *winUserOnlineReportDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winUserOnlineReportDo) Assign(attrs ...field.AssignExpr) *winUserOnlineReportDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winUserOnlineReportDo) Joins(fields ...field.RelationField) *winUserOnlineReportDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winUserOnlineReportDo) Preload(fields ...field.RelationField) *winUserOnlineReportDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winUserOnlineReportDo) FirstOrInit() (*model.WinUserOnlineReport, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserOnlineReport), nil
	}
}

func (w winUserOnlineReportDo) FirstOrCreate() (*model.WinUserOnlineReport, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserOnlineReport), nil
	}
}

func (w winUserOnlineReportDo) FindByPage(offset int, limit int) (result []*model.WinUserOnlineReport, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winUserOnlineReportDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winUserOnlineReportDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winUserOnlineReportDo) Delete(models ...*model.WinUserOnlineReport) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winUserOnlineReportDo) withDO(do gen.Dao) *winUserOnlineReportDo {
	w.DO = *do.(*gen.DO)
	return w
}
