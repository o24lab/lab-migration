// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package oldmain

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"migration/pkg/model"
)

func newWinFrontGameClassifyCm(db *gorm.DB, opts ...gen.DOOption) winFrontGameClassifyCm {
	_winFrontGameClassifyCm := winFrontGameClassifyCm{}

	_winFrontGameClassifyCm.winFrontGameClassifyCmDo.UseDB(db, opts...)
	_winFrontGameClassifyCm.winFrontGameClassifyCmDo.UseModel(&model.WinFrontGameClassifyCm{})

	tableName := _winFrontGameClassifyCm.winFrontGameClassifyCmDo.TableName()
	_winFrontGameClassifyCm.ALL = field.NewAsterisk(tableName)
	_winFrontGameClassifyCm.ID = field.NewInt32(tableName, "id")
	_winFrontGameClassifyCm.Sort = field.NewInt32(tableName, "sort")
	_winFrontGameClassifyCm.CName = field.NewString(tableName, "c_name")
	_winFrontGameClassifyCm.LogoURL = field.NewString(tableName, "logo_url")
	_winFrontGameClassifyCm.Enable = field.NewInt32(tableName, "enable")
	_winFrontGameClassifyCm.CreatedAt = field.NewInt64(tableName, "created_at")
	_winFrontGameClassifyCm.CreateUser = field.NewString(tableName, "create_user")
	_winFrontGameClassifyCm.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_winFrontGameClassifyCm.UpdateUser = field.NewString(tableName, "update_user")
	_winFrontGameClassifyCm.OperatorName = field.NewString(tableName, "operator_name")

	_winFrontGameClassifyCm.fillFieldMap()

	return _winFrontGameClassifyCm
}

// winFrontGameClassifyCm 首页游戏分类页面配置表
type winFrontGameClassifyCm struct {
	winFrontGameClassifyCmDo

	ALL          field.Asterisk
	ID           field.Int32
	Sort         field.Int32  // 排序
	CName        field.String // 分类名称
	LogoURL      field.String // 图片地址
	Enable       field.Int32  // 状态:0关闭,1启用
	CreatedAt    field.Int64  // 创建时间
	CreateUser   field.String // 创建人
	UpdatedAt    field.Int64  // 修改人
	UpdateUser   field.String // 修改人
	OperatorName field.String // 操作人姓名

	fieldMap map[string]field.Expr
}

func (w winFrontGameClassifyCm) Table(newTableName string) *winFrontGameClassifyCm {
	w.winFrontGameClassifyCmDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winFrontGameClassifyCm) As(alias string) *winFrontGameClassifyCm {
	w.winFrontGameClassifyCmDo.DO = *(w.winFrontGameClassifyCmDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winFrontGameClassifyCm) updateTableName(table string) *winFrontGameClassifyCm {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt32(table, "id")
	w.Sort = field.NewInt32(table, "sort")
	w.CName = field.NewString(table, "c_name")
	w.LogoURL = field.NewString(table, "logo_url")
	w.Enable = field.NewInt32(table, "enable")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.CreateUser = field.NewString(table, "create_user")
	w.UpdatedAt = field.NewInt64(table, "updated_at")
	w.UpdateUser = field.NewString(table, "update_user")
	w.OperatorName = field.NewString(table, "operator_name")

	w.fillFieldMap()

	return w
}

func (w *winFrontGameClassifyCm) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winFrontGameClassifyCm) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 10)
	w.fieldMap["id"] = w.ID
	w.fieldMap["sort"] = w.Sort
	w.fieldMap["c_name"] = w.CName
	w.fieldMap["logo_url"] = w.LogoURL
	w.fieldMap["enable"] = w.Enable
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["create_user"] = w.CreateUser
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["update_user"] = w.UpdateUser
	w.fieldMap["operator_name"] = w.OperatorName
}

func (w winFrontGameClassifyCm) clone(db *gorm.DB) winFrontGameClassifyCm {
	w.winFrontGameClassifyCmDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winFrontGameClassifyCm) replaceDB(db *gorm.DB) winFrontGameClassifyCm {
	w.winFrontGameClassifyCmDo.ReplaceDB(db)
	return w
}

type winFrontGameClassifyCmDo struct{ gen.DO }

func (w winFrontGameClassifyCmDo) Debug() *winFrontGameClassifyCmDo {
	return w.withDO(w.DO.Debug())
}

func (w winFrontGameClassifyCmDo) WithContext(ctx context.Context) *winFrontGameClassifyCmDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winFrontGameClassifyCmDo) ReadDB() *winFrontGameClassifyCmDo {
	return w.Clauses(dbresolver.Read)
}

func (w winFrontGameClassifyCmDo) WriteDB() *winFrontGameClassifyCmDo {
	return w.Clauses(dbresolver.Write)
}

func (w winFrontGameClassifyCmDo) Session(config *gorm.Session) *winFrontGameClassifyCmDo {
	return w.withDO(w.DO.Session(config))
}

func (w winFrontGameClassifyCmDo) Clauses(conds ...clause.Expression) *winFrontGameClassifyCmDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winFrontGameClassifyCmDo) Returning(value interface{}, columns ...string) *winFrontGameClassifyCmDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winFrontGameClassifyCmDo) Not(conds ...gen.Condition) *winFrontGameClassifyCmDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winFrontGameClassifyCmDo) Or(conds ...gen.Condition) *winFrontGameClassifyCmDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winFrontGameClassifyCmDo) Select(conds ...field.Expr) *winFrontGameClassifyCmDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winFrontGameClassifyCmDo) Where(conds ...gen.Condition) *winFrontGameClassifyCmDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winFrontGameClassifyCmDo) Order(conds ...field.Expr) *winFrontGameClassifyCmDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winFrontGameClassifyCmDo) Distinct(cols ...field.Expr) *winFrontGameClassifyCmDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winFrontGameClassifyCmDo) Omit(cols ...field.Expr) *winFrontGameClassifyCmDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winFrontGameClassifyCmDo) Join(table schema.Tabler, on ...field.Expr) *winFrontGameClassifyCmDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winFrontGameClassifyCmDo) LeftJoin(table schema.Tabler, on ...field.Expr) *winFrontGameClassifyCmDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winFrontGameClassifyCmDo) RightJoin(table schema.Tabler, on ...field.Expr) *winFrontGameClassifyCmDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winFrontGameClassifyCmDo) Group(cols ...field.Expr) *winFrontGameClassifyCmDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winFrontGameClassifyCmDo) Having(conds ...gen.Condition) *winFrontGameClassifyCmDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winFrontGameClassifyCmDo) Limit(limit int) *winFrontGameClassifyCmDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winFrontGameClassifyCmDo) Offset(offset int) *winFrontGameClassifyCmDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winFrontGameClassifyCmDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *winFrontGameClassifyCmDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winFrontGameClassifyCmDo) Unscoped() *winFrontGameClassifyCmDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winFrontGameClassifyCmDo) Create(values ...*model.WinFrontGameClassifyCm) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winFrontGameClassifyCmDo) CreateInBatches(values []*model.WinFrontGameClassifyCm, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winFrontGameClassifyCmDo) Save(values ...*model.WinFrontGameClassifyCm) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winFrontGameClassifyCmDo) First() (*model.WinFrontGameClassifyCm, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinFrontGameClassifyCm), nil
	}
}

func (w winFrontGameClassifyCmDo) Take() (*model.WinFrontGameClassifyCm, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinFrontGameClassifyCm), nil
	}
}

func (w winFrontGameClassifyCmDo) Last() (*model.WinFrontGameClassifyCm, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinFrontGameClassifyCm), nil
	}
}

func (w winFrontGameClassifyCmDo) Find() ([]*model.WinFrontGameClassifyCm, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinFrontGameClassifyCm), err
}

func (w winFrontGameClassifyCmDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinFrontGameClassifyCm, err error) {
	buf := make([]*model.WinFrontGameClassifyCm, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winFrontGameClassifyCmDo) FindInBatches(result *[]*model.WinFrontGameClassifyCm, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winFrontGameClassifyCmDo) Attrs(attrs ...field.AssignExpr) *winFrontGameClassifyCmDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winFrontGameClassifyCmDo) Assign(attrs ...field.AssignExpr) *winFrontGameClassifyCmDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winFrontGameClassifyCmDo) Joins(fields ...field.RelationField) *winFrontGameClassifyCmDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winFrontGameClassifyCmDo) Preload(fields ...field.RelationField) *winFrontGameClassifyCmDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winFrontGameClassifyCmDo) FirstOrInit() (*model.WinFrontGameClassifyCm, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinFrontGameClassifyCm), nil
	}
}

func (w winFrontGameClassifyCmDo) FirstOrCreate() (*model.WinFrontGameClassifyCm, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinFrontGameClassifyCm), nil
	}
}

func (w winFrontGameClassifyCmDo) FindByPage(offset int, limit int) (result []*model.WinFrontGameClassifyCm, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winFrontGameClassifyCmDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winFrontGameClassifyCmDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winFrontGameClassifyCmDo) Delete(models ...*model.WinFrontGameClassifyCm) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winFrontGameClassifyCmDo) withDO(do gen.Dao) *winFrontGameClassifyCmDo {
	w.DO = *do.(*gen.DO)
	return w
}
