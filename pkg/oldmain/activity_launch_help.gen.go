// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package oldmain

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"migration/pkg/model"
)

func newActivityLaunchHelp(db *gorm.DB, opts ...gen.DOOption) activityLaunchHelp {
	_activityLaunchHelp := activityLaunchHelp{}

	_activityLaunchHelp.activityLaunchHelpDo.UseDB(db, opts...)
	_activityLaunchHelp.activityLaunchHelpDo.UseModel(&model.ActivityLaunchHelp{})

	tableName := _activityLaunchHelp.activityLaunchHelpDo.TableName()
	_activityLaunchHelp.ALL = field.NewAsterisk(tableName)
	_activityLaunchHelp.ID = field.NewInt64(tableName, "id")
	_activityLaunchHelp.ActivityTitle = field.NewString(tableName, "activity_title")
	_activityLaunchHelp.ActivityID = field.NewInt64(tableName, "activity_id")
	_activityLaunchHelp.UID = field.NewInt32(tableName, "uid")
	_activityLaunchHelp.HelpStatus = field.NewInt32(tableName, "help_status")
	_activityLaunchHelp.StartAt = field.NewInt32(tableName, "start_at")
	_activityLaunchHelp.EndAt = field.NewInt32(tableName, "end_at")
	_activityLaunchHelp.FirstStagePer = field.NewFloat64(tableName, "first_stage_per")
	_activityLaunchHelp.SecondStagePer = field.NewFloat64(tableName, "second_stage_per")
	_activityLaunchHelp.ThirdStagePer = field.NewFloat64(tableName, "third_stage_per")
	_activityLaunchHelp.CompletePer = field.NewFloat64(tableName, "complete_per")
	_activityLaunchHelp.TargetHelpPoint = field.NewFloat64(tableName, "target_help_point")
	_activityLaunchHelp.FirstStageBonus = field.NewFloat64(tableName, "first_stage_bonus")
	_activityLaunchHelp.SecondStageBonus = field.NewFloat64(tableName, "second_stage_bonus")
	_activityLaunchHelp.ThirdStageBonus = field.NewFloat64(tableName, "third_stage_bonus")
	_activityLaunchHelp.FourthStageBonus = field.NewFloat64(tableName, "fourth_stage_bonus")
	_activityLaunchHelp.HelpCount = field.NewInt32(tableName, "help_count")
	_activityLaunchHelp.DepositAmount = field.NewFloat64(tableName, "deposit_amount")
	_activityLaunchHelp.URL = field.NewString(tableName, "url")
	_activityLaunchHelp.ApplyTimes = field.NewInt32(tableName, "apply_times")
	_activityLaunchHelp.FirstHelpSuccess = field.NewInt32(tableName, "first_help_success")
	_activityLaunchHelp.CreateAt = field.NewInt32(tableName, "create_at")
	_activityLaunchHelp.UpdateAt = field.NewInt32(tableName, "update_at")
	_activityLaunchHelp.OpUser = field.NewString(tableName, "op_user")
	_activityLaunchHelp.Version = field.NewInt32(tableName, "version")
	_activityLaunchHelp.Remark = field.NewString(tableName, "remark")

	_activityLaunchHelp.fillFieldMap()

	return _activityLaunchHelp
}

// activityLaunchHelp 发起助力信息表
type activityLaunchHelp struct {
	activityLaunchHelpDo

	ALL              field.Asterisk
	ID               field.Int64   // 发起助力表ID，自增主键
	ActivityTitle    field.String  // 活动标题
	ActivityID       field.Int64   // 活动ID
	UID              field.Int32   // 发起助力用户ID
	HelpStatus       field.Int32   // 助力状态：0-助力中，1-助力成功，2-助力失败
	StartAt          field.Int32   // 圣诞礼盒发起时间
	EndAt            field.Int32   // 圣诞礼盒完成结束时间
	FirstStagePer    field.Float64 // 1阶段助力的百分比
	SecondStagePer   field.Float64 // 2阶段助力的百分比
	ThirdStagePer    field.Float64 // 3阶段助力的百分比
	CompletePer      field.Float64 // 已完成百分比数
	TargetHelpPoint  field.Float64 // 目标总助力点
	FirstStageBonus  field.Float64 // 1阶段的奖金
	SecondStageBonus field.Float64 // 2阶段的奖金
	ThirdStageBonus  field.Float64 // 3阶段的奖金
	FourthStageBonus field.Float64 // 4阶段的奖金
	HelpCount        field.Int32   // 助力成功人數
	DepositAmount    field.Float64 // 存款金額
	URL              field.String  // 发起助力链接
	ApplyTimes       field.Int32   // 已領取禮盒次數
	FirstHelpSuccess field.Int32   // 是否可以一次助力成功:0無法 1可以
	CreateAt         field.Int32   // 创建时间
	UpdateAt         field.Int32   // 修改时间
	OpUser           field.String  // 操作人
	Version          field.Int32   // 版本号
	Remark           field.String  // 备注

	fieldMap map[string]field.Expr
}

func (a activityLaunchHelp) Table(newTableName string) *activityLaunchHelp {
	a.activityLaunchHelpDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a activityLaunchHelp) As(alias string) *activityLaunchHelp {
	a.activityLaunchHelpDo.DO = *(a.activityLaunchHelpDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *activityLaunchHelp) updateTableName(table string) *activityLaunchHelp {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.ActivityTitle = field.NewString(table, "activity_title")
	a.ActivityID = field.NewInt64(table, "activity_id")
	a.UID = field.NewInt32(table, "uid")
	a.HelpStatus = field.NewInt32(table, "help_status")
	a.StartAt = field.NewInt32(table, "start_at")
	a.EndAt = field.NewInt32(table, "end_at")
	a.FirstStagePer = field.NewFloat64(table, "first_stage_per")
	a.SecondStagePer = field.NewFloat64(table, "second_stage_per")
	a.ThirdStagePer = field.NewFloat64(table, "third_stage_per")
	a.CompletePer = field.NewFloat64(table, "complete_per")
	a.TargetHelpPoint = field.NewFloat64(table, "target_help_point")
	a.FirstStageBonus = field.NewFloat64(table, "first_stage_bonus")
	a.SecondStageBonus = field.NewFloat64(table, "second_stage_bonus")
	a.ThirdStageBonus = field.NewFloat64(table, "third_stage_bonus")
	a.FourthStageBonus = field.NewFloat64(table, "fourth_stage_bonus")
	a.HelpCount = field.NewInt32(table, "help_count")
	a.DepositAmount = field.NewFloat64(table, "deposit_amount")
	a.URL = field.NewString(table, "url")
	a.ApplyTimes = field.NewInt32(table, "apply_times")
	a.FirstHelpSuccess = field.NewInt32(table, "first_help_success")
	a.CreateAt = field.NewInt32(table, "create_at")
	a.UpdateAt = field.NewInt32(table, "update_at")
	a.OpUser = field.NewString(table, "op_user")
	a.Version = field.NewInt32(table, "version")
	a.Remark = field.NewString(table, "remark")

	a.fillFieldMap()

	return a
}

func (a *activityLaunchHelp) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *activityLaunchHelp) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 26)
	a.fieldMap["id"] = a.ID
	a.fieldMap["activity_title"] = a.ActivityTitle
	a.fieldMap["activity_id"] = a.ActivityID
	a.fieldMap["uid"] = a.UID
	a.fieldMap["help_status"] = a.HelpStatus
	a.fieldMap["start_at"] = a.StartAt
	a.fieldMap["end_at"] = a.EndAt
	a.fieldMap["first_stage_per"] = a.FirstStagePer
	a.fieldMap["second_stage_per"] = a.SecondStagePer
	a.fieldMap["third_stage_per"] = a.ThirdStagePer
	a.fieldMap["complete_per"] = a.CompletePer
	a.fieldMap["target_help_point"] = a.TargetHelpPoint
	a.fieldMap["first_stage_bonus"] = a.FirstStageBonus
	a.fieldMap["second_stage_bonus"] = a.SecondStageBonus
	a.fieldMap["third_stage_bonus"] = a.ThirdStageBonus
	a.fieldMap["fourth_stage_bonus"] = a.FourthStageBonus
	a.fieldMap["help_count"] = a.HelpCount
	a.fieldMap["deposit_amount"] = a.DepositAmount
	a.fieldMap["url"] = a.URL
	a.fieldMap["apply_times"] = a.ApplyTimes
	a.fieldMap["first_help_success"] = a.FirstHelpSuccess
	a.fieldMap["create_at"] = a.CreateAt
	a.fieldMap["update_at"] = a.UpdateAt
	a.fieldMap["op_user"] = a.OpUser
	a.fieldMap["version"] = a.Version
	a.fieldMap["remark"] = a.Remark
}

func (a activityLaunchHelp) clone(db *gorm.DB) activityLaunchHelp {
	a.activityLaunchHelpDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a activityLaunchHelp) replaceDB(db *gorm.DB) activityLaunchHelp {
	a.activityLaunchHelpDo.ReplaceDB(db)
	return a
}

type activityLaunchHelpDo struct{ gen.DO }

func (a activityLaunchHelpDo) Debug() *activityLaunchHelpDo {
	return a.withDO(a.DO.Debug())
}

func (a activityLaunchHelpDo) WithContext(ctx context.Context) *activityLaunchHelpDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a activityLaunchHelpDo) ReadDB() *activityLaunchHelpDo {
	return a.Clauses(dbresolver.Read)
}

func (a activityLaunchHelpDo) WriteDB() *activityLaunchHelpDo {
	return a.Clauses(dbresolver.Write)
}

func (a activityLaunchHelpDo) Session(config *gorm.Session) *activityLaunchHelpDo {
	return a.withDO(a.DO.Session(config))
}

func (a activityLaunchHelpDo) Clauses(conds ...clause.Expression) *activityLaunchHelpDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a activityLaunchHelpDo) Returning(value interface{}, columns ...string) *activityLaunchHelpDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a activityLaunchHelpDo) Not(conds ...gen.Condition) *activityLaunchHelpDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a activityLaunchHelpDo) Or(conds ...gen.Condition) *activityLaunchHelpDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a activityLaunchHelpDo) Select(conds ...field.Expr) *activityLaunchHelpDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a activityLaunchHelpDo) Where(conds ...gen.Condition) *activityLaunchHelpDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a activityLaunchHelpDo) Order(conds ...field.Expr) *activityLaunchHelpDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a activityLaunchHelpDo) Distinct(cols ...field.Expr) *activityLaunchHelpDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a activityLaunchHelpDo) Omit(cols ...field.Expr) *activityLaunchHelpDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a activityLaunchHelpDo) Join(table schema.Tabler, on ...field.Expr) *activityLaunchHelpDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a activityLaunchHelpDo) LeftJoin(table schema.Tabler, on ...field.Expr) *activityLaunchHelpDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a activityLaunchHelpDo) RightJoin(table schema.Tabler, on ...field.Expr) *activityLaunchHelpDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a activityLaunchHelpDo) Group(cols ...field.Expr) *activityLaunchHelpDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a activityLaunchHelpDo) Having(conds ...gen.Condition) *activityLaunchHelpDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a activityLaunchHelpDo) Limit(limit int) *activityLaunchHelpDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a activityLaunchHelpDo) Offset(offset int) *activityLaunchHelpDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a activityLaunchHelpDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *activityLaunchHelpDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a activityLaunchHelpDo) Unscoped() *activityLaunchHelpDo {
	return a.withDO(a.DO.Unscoped())
}

func (a activityLaunchHelpDo) Create(values ...*model.ActivityLaunchHelp) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a activityLaunchHelpDo) CreateInBatches(values []*model.ActivityLaunchHelp, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a activityLaunchHelpDo) Save(values ...*model.ActivityLaunchHelp) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a activityLaunchHelpDo) First() (*model.ActivityLaunchHelp, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityLaunchHelp), nil
	}
}

func (a activityLaunchHelpDo) Take() (*model.ActivityLaunchHelp, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityLaunchHelp), nil
	}
}

func (a activityLaunchHelpDo) Last() (*model.ActivityLaunchHelp, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityLaunchHelp), nil
	}
}

func (a activityLaunchHelpDo) Find() ([]*model.ActivityLaunchHelp, error) {
	result, err := a.DO.Find()
	return result.([]*model.ActivityLaunchHelp), err
}

func (a activityLaunchHelpDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ActivityLaunchHelp, err error) {
	buf := make([]*model.ActivityLaunchHelp, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a activityLaunchHelpDo) FindInBatches(result *[]*model.ActivityLaunchHelp, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a activityLaunchHelpDo) Attrs(attrs ...field.AssignExpr) *activityLaunchHelpDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a activityLaunchHelpDo) Assign(attrs ...field.AssignExpr) *activityLaunchHelpDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a activityLaunchHelpDo) Joins(fields ...field.RelationField) *activityLaunchHelpDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a activityLaunchHelpDo) Preload(fields ...field.RelationField) *activityLaunchHelpDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a activityLaunchHelpDo) FirstOrInit() (*model.ActivityLaunchHelp, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityLaunchHelp), nil
	}
}

func (a activityLaunchHelpDo) FirstOrCreate() (*model.ActivityLaunchHelp, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ActivityLaunchHelp), nil
	}
}

func (a activityLaunchHelpDo) FindByPage(offset int, limit int) (result []*model.ActivityLaunchHelp, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a activityLaunchHelpDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a activityLaunchHelpDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a activityLaunchHelpDo) Delete(models ...*model.ActivityLaunchHelp) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *activityLaunchHelpDo) withDO(do gen.Dao) *activityLaunchHelpDo {
	a.DO = *do.(*gen.DO)
	return a
}
