// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package oldmain

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"migration/pkg/model"
)

func newXxlJobLog(db *gorm.DB, opts ...gen.DOOption) xxlJobLog {
	_xxlJobLog := xxlJobLog{}

	_xxlJobLog.xxlJobLogDo.UseDB(db, opts...)
	_xxlJobLog.xxlJobLogDo.UseModel(&model.XxlJobLog{})

	tableName := _xxlJobLog.xxlJobLogDo.TableName()
	_xxlJobLog.ALL = field.NewAsterisk(tableName)
	_xxlJobLog.ID = field.NewInt64(tableName, "id")
	_xxlJobLog.JobGroup = field.NewInt32(tableName, "job_group")
	_xxlJobLog.JobID = field.NewInt32(tableName, "job_id")
	_xxlJobLog.ExecutorAddress = field.NewString(tableName, "executor_address")
	_xxlJobLog.ExecutorHandler = field.NewString(tableName, "executor_handler")
	_xxlJobLog.ExecutorParam = field.NewString(tableName, "executor_param")
	_xxlJobLog.ExecutorShardingParam = field.NewString(tableName, "executor_sharding_param")
	_xxlJobLog.ExecutorFailRetryCount = field.NewInt32(tableName, "executor_fail_retry_count")
	_xxlJobLog.TriggerTime = field.NewTime(tableName, "trigger_time")
	_xxlJobLog.TriggerCode = field.NewInt32(tableName, "trigger_code")
	_xxlJobLog.TriggerMsg = field.NewString(tableName, "trigger_msg")
	_xxlJobLog.HandleTime = field.NewTime(tableName, "handle_time")
	_xxlJobLog.HandleCode = field.NewInt32(tableName, "handle_code")
	_xxlJobLog.HandleMsg = field.NewString(tableName, "handle_msg")
	_xxlJobLog.AlarmStatus = field.NewInt32(tableName, "alarm_status")

	_xxlJobLog.fillFieldMap()

	return _xxlJobLog
}

type xxlJobLog struct {
	xxlJobLogDo

	ALL                    field.Asterisk
	ID                     field.Int64
	JobGroup               field.Int32  // 执行器主键ID
	JobID                  field.Int32  // 任务，主键ID
	ExecutorAddress        field.String // 执行器地址，本次执行的地址
	ExecutorHandler        field.String // 执行器任务handler
	ExecutorParam          field.String // 执行器任务参数
	ExecutorShardingParam  field.String // 执行器任务分片参数，格式如 1/2
	ExecutorFailRetryCount field.Int32  // 失败重试次数
	TriggerTime            field.Time   // 调度-时间
	TriggerCode            field.Int32  // 调度-结果
	TriggerMsg             field.String // 调度-日志
	HandleTime             field.Time   // 执行-时间
	HandleCode             field.Int32  // 执行-状态
	HandleMsg              field.String // 执行-日志
	AlarmStatus            field.Int32  // 告警状态：0-默认、1-无需告警、2-告警成功、3-告警失败

	fieldMap map[string]field.Expr
}

func (x xxlJobLog) Table(newTableName string) *xxlJobLog {
	x.xxlJobLogDo.UseTable(newTableName)
	return x.updateTableName(newTableName)
}

func (x xxlJobLog) As(alias string) *xxlJobLog {
	x.xxlJobLogDo.DO = *(x.xxlJobLogDo.As(alias).(*gen.DO))
	return x.updateTableName(alias)
}

func (x *xxlJobLog) updateTableName(table string) *xxlJobLog {
	x.ALL = field.NewAsterisk(table)
	x.ID = field.NewInt64(table, "id")
	x.JobGroup = field.NewInt32(table, "job_group")
	x.JobID = field.NewInt32(table, "job_id")
	x.ExecutorAddress = field.NewString(table, "executor_address")
	x.ExecutorHandler = field.NewString(table, "executor_handler")
	x.ExecutorParam = field.NewString(table, "executor_param")
	x.ExecutorShardingParam = field.NewString(table, "executor_sharding_param")
	x.ExecutorFailRetryCount = field.NewInt32(table, "executor_fail_retry_count")
	x.TriggerTime = field.NewTime(table, "trigger_time")
	x.TriggerCode = field.NewInt32(table, "trigger_code")
	x.TriggerMsg = field.NewString(table, "trigger_msg")
	x.HandleTime = field.NewTime(table, "handle_time")
	x.HandleCode = field.NewInt32(table, "handle_code")
	x.HandleMsg = field.NewString(table, "handle_msg")
	x.AlarmStatus = field.NewInt32(table, "alarm_status")

	x.fillFieldMap()

	return x
}

func (x *xxlJobLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := x.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (x *xxlJobLog) fillFieldMap() {
	x.fieldMap = make(map[string]field.Expr, 15)
	x.fieldMap["id"] = x.ID
	x.fieldMap["job_group"] = x.JobGroup
	x.fieldMap["job_id"] = x.JobID
	x.fieldMap["executor_address"] = x.ExecutorAddress
	x.fieldMap["executor_handler"] = x.ExecutorHandler
	x.fieldMap["executor_param"] = x.ExecutorParam
	x.fieldMap["executor_sharding_param"] = x.ExecutorShardingParam
	x.fieldMap["executor_fail_retry_count"] = x.ExecutorFailRetryCount
	x.fieldMap["trigger_time"] = x.TriggerTime
	x.fieldMap["trigger_code"] = x.TriggerCode
	x.fieldMap["trigger_msg"] = x.TriggerMsg
	x.fieldMap["handle_time"] = x.HandleTime
	x.fieldMap["handle_code"] = x.HandleCode
	x.fieldMap["handle_msg"] = x.HandleMsg
	x.fieldMap["alarm_status"] = x.AlarmStatus
}

func (x xxlJobLog) clone(db *gorm.DB) xxlJobLog {
	x.xxlJobLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return x
}

func (x xxlJobLog) replaceDB(db *gorm.DB) xxlJobLog {
	x.xxlJobLogDo.ReplaceDB(db)
	return x
}

type xxlJobLogDo struct{ gen.DO }

func (x xxlJobLogDo) Debug() *xxlJobLogDo {
	return x.withDO(x.DO.Debug())
}

func (x xxlJobLogDo) WithContext(ctx context.Context) *xxlJobLogDo {
	return x.withDO(x.DO.WithContext(ctx))
}

func (x xxlJobLogDo) ReadDB() *xxlJobLogDo {
	return x.Clauses(dbresolver.Read)
}

func (x xxlJobLogDo) WriteDB() *xxlJobLogDo {
	return x.Clauses(dbresolver.Write)
}

func (x xxlJobLogDo) Session(config *gorm.Session) *xxlJobLogDo {
	return x.withDO(x.DO.Session(config))
}

func (x xxlJobLogDo) Clauses(conds ...clause.Expression) *xxlJobLogDo {
	return x.withDO(x.DO.Clauses(conds...))
}

func (x xxlJobLogDo) Returning(value interface{}, columns ...string) *xxlJobLogDo {
	return x.withDO(x.DO.Returning(value, columns...))
}

func (x xxlJobLogDo) Not(conds ...gen.Condition) *xxlJobLogDo {
	return x.withDO(x.DO.Not(conds...))
}

func (x xxlJobLogDo) Or(conds ...gen.Condition) *xxlJobLogDo {
	return x.withDO(x.DO.Or(conds...))
}

func (x xxlJobLogDo) Select(conds ...field.Expr) *xxlJobLogDo {
	return x.withDO(x.DO.Select(conds...))
}

func (x xxlJobLogDo) Where(conds ...gen.Condition) *xxlJobLogDo {
	return x.withDO(x.DO.Where(conds...))
}

func (x xxlJobLogDo) Order(conds ...field.Expr) *xxlJobLogDo {
	return x.withDO(x.DO.Order(conds...))
}

func (x xxlJobLogDo) Distinct(cols ...field.Expr) *xxlJobLogDo {
	return x.withDO(x.DO.Distinct(cols...))
}

func (x xxlJobLogDo) Omit(cols ...field.Expr) *xxlJobLogDo {
	return x.withDO(x.DO.Omit(cols...))
}

func (x xxlJobLogDo) Join(table schema.Tabler, on ...field.Expr) *xxlJobLogDo {
	return x.withDO(x.DO.Join(table, on...))
}

func (x xxlJobLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) *xxlJobLogDo {
	return x.withDO(x.DO.LeftJoin(table, on...))
}

func (x xxlJobLogDo) RightJoin(table schema.Tabler, on ...field.Expr) *xxlJobLogDo {
	return x.withDO(x.DO.RightJoin(table, on...))
}

func (x xxlJobLogDo) Group(cols ...field.Expr) *xxlJobLogDo {
	return x.withDO(x.DO.Group(cols...))
}

func (x xxlJobLogDo) Having(conds ...gen.Condition) *xxlJobLogDo {
	return x.withDO(x.DO.Having(conds...))
}

func (x xxlJobLogDo) Limit(limit int) *xxlJobLogDo {
	return x.withDO(x.DO.Limit(limit))
}

func (x xxlJobLogDo) Offset(offset int) *xxlJobLogDo {
	return x.withDO(x.DO.Offset(offset))
}

func (x xxlJobLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *xxlJobLogDo {
	return x.withDO(x.DO.Scopes(funcs...))
}

func (x xxlJobLogDo) Unscoped() *xxlJobLogDo {
	return x.withDO(x.DO.Unscoped())
}

func (x xxlJobLogDo) Create(values ...*model.XxlJobLog) error {
	if len(values) == 0 {
		return nil
	}
	return x.DO.Create(values)
}

func (x xxlJobLogDo) CreateInBatches(values []*model.XxlJobLog, batchSize int) error {
	return x.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (x xxlJobLogDo) Save(values ...*model.XxlJobLog) error {
	if len(values) == 0 {
		return nil
	}
	return x.DO.Save(values)
}

func (x xxlJobLogDo) First() (*model.XxlJobLog, error) {
	if result, err := x.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.XxlJobLog), nil
	}
}

func (x xxlJobLogDo) Take() (*model.XxlJobLog, error) {
	if result, err := x.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.XxlJobLog), nil
	}
}

func (x xxlJobLogDo) Last() (*model.XxlJobLog, error) {
	if result, err := x.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.XxlJobLog), nil
	}
}

func (x xxlJobLogDo) Find() ([]*model.XxlJobLog, error) {
	result, err := x.DO.Find()
	return result.([]*model.XxlJobLog), err
}

func (x xxlJobLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.XxlJobLog, err error) {
	buf := make([]*model.XxlJobLog, 0, batchSize)
	err = x.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (x xxlJobLogDo) FindInBatches(result *[]*model.XxlJobLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return x.DO.FindInBatches(result, batchSize, fc)
}

func (x xxlJobLogDo) Attrs(attrs ...field.AssignExpr) *xxlJobLogDo {
	return x.withDO(x.DO.Attrs(attrs...))
}

func (x xxlJobLogDo) Assign(attrs ...field.AssignExpr) *xxlJobLogDo {
	return x.withDO(x.DO.Assign(attrs...))
}

func (x xxlJobLogDo) Joins(fields ...field.RelationField) *xxlJobLogDo {
	for _, _f := range fields {
		x = *x.withDO(x.DO.Joins(_f))
	}
	return &x
}

func (x xxlJobLogDo) Preload(fields ...field.RelationField) *xxlJobLogDo {
	for _, _f := range fields {
		x = *x.withDO(x.DO.Preload(_f))
	}
	return &x
}

func (x xxlJobLogDo) FirstOrInit() (*model.XxlJobLog, error) {
	if result, err := x.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.XxlJobLog), nil
	}
}

func (x xxlJobLogDo) FirstOrCreate() (*model.XxlJobLog, error) {
	if result, err := x.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.XxlJobLog), nil
	}
}

func (x xxlJobLogDo) FindByPage(offset int, limit int) (result []*model.XxlJobLog, count int64, err error) {
	result, err = x.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = x.Offset(-1).Limit(-1).Count()
	return
}

func (x xxlJobLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = x.Count()
	if err != nil {
		return
	}

	err = x.Offset(offset).Limit(limit).Scan(result)
	return
}

func (x xxlJobLogDo) Scan(result interface{}) (err error) {
	return x.DO.Scan(result)
}

func (x xxlJobLogDo) Delete(models ...*model.XxlJobLog) (result gen.ResultInfo, err error) {
	return x.DO.Delete(models)
}

func (x *xxlJobLogDo) withDO(do gen.Dao) *xxlJobLogDo {
	x.DO = *do.(*gen.DO)
	return x
}
