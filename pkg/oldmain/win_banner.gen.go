// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package oldmain

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"migration/pkg/model"
)

func newWinBanner(db *gorm.DB, opts ...gen.DOOption) winBanner {
	_winBanner := winBanner{}

	_winBanner.winBannerDo.UseDB(db, opts...)
	_winBanner.winBannerDo.UseModel(&model.WinBanner{})

	tableName := _winBanner.winBannerDo.TableName()
	_winBanner.ALL = field.NewAsterisk(tableName)
	_winBanner.ID = field.NewInt32(tableName, "id")
	_winBanner.Type = field.NewInt32(tableName, "type")
	_winBanner.Img = field.NewString(tableName, "img")
	_winBanner.Href = field.NewString(tableName, "href")
	_winBanner.Sort = field.NewInt32(tableName, "sort")
	_winBanner.Status = field.NewInt32(tableName, "status")
	_winBanner.Device = field.NewString(tableName, "device")
	_winBanner.Language = field.NewString(tableName, "language")
	_winBanner.CreatedAt = field.NewInt32(tableName, "created_at")
	_winBanner.CreatedBy = field.NewString(tableName, "created_by")
	_winBanner.UpdatedAt = field.NewInt32(tableName, "updated_at")
	_winBanner.JumpType = field.NewInt32(tableName, "jump_type")
	_winBanner.SlotID = field.NewString(tableName, "slot_id")
	_winBanner.GameID = field.NewInt32(tableName, "game_id")
	_winBanner.GameGroupID = field.NewInt32(tableName, "game_group_id")
	_winBanner.PlatID = field.NewInt32(tableName, "plat_id")
	_winBanner.OperatorName = field.NewString(tableName, "operator_name")
	_winBanner.UpdatedBy = field.NewString(tableName, "updated_by")

	_winBanner.fillFieldMap()

	return _winBanner
}

// winBanner 平台BANNER表
type winBanner struct {
	winBannerDo

	ALL          field.Asterisk
	ID           field.Int32
	Type         field.Int32  // 类型：1首页Banner，2登录/注册Banner
	Img          field.String // 图片地址
	Href         field.String // 跳转地址
	Sort         field.Int32  // 排序(从高到低)
	Status       field.Int32  // 状态:1-启用 0-停用
	Device       field.String // 设备:m-手机 d-电脑 ANDROID-安卓 IOS-苹果
	Language     field.String // 语言
	CreatedAt    field.Int32
	CreatedBy    field.String // 创建者
	UpdatedAt    field.Int32
	JumpType     field.Int32  // 跳转类型：1跳转链接 2跳转游戏
	SlotID       field.String // slotId
	GameID       field.Int32  // 游戏ID(关联game_list)
	GameGroupID  field.Int32  // 游戏大类类型
	PlatID       field.Int32  // 游戏平台id
	OperatorName field.String // 操作人姓名
	UpdatedBy    field.String // 更新人

	fieldMap map[string]field.Expr
}

func (w winBanner) Table(newTableName string) *winBanner {
	w.winBannerDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winBanner) As(alias string) *winBanner {
	w.winBannerDo.DO = *(w.winBannerDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winBanner) updateTableName(table string) *winBanner {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt32(table, "id")
	w.Type = field.NewInt32(table, "type")
	w.Img = field.NewString(table, "img")
	w.Href = field.NewString(table, "href")
	w.Sort = field.NewInt32(table, "sort")
	w.Status = field.NewInt32(table, "status")
	w.Device = field.NewString(table, "device")
	w.Language = field.NewString(table, "language")
	w.CreatedAt = field.NewInt32(table, "created_at")
	w.CreatedBy = field.NewString(table, "created_by")
	w.UpdatedAt = field.NewInt32(table, "updated_at")
	w.JumpType = field.NewInt32(table, "jump_type")
	w.SlotID = field.NewString(table, "slot_id")
	w.GameID = field.NewInt32(table, "game_id")
	w.GameGroupID = field.NewInt32(table, "game_group_id")
	w.PlatID = field.NewInt32(table, "plat_id")
	w.OperatorName = field.NewString(table, "operator_name")
	w.UpdatedBy = field.NewString(table, "updated_by")

	w.fillFieldMap()

	return w
}

func (w *winBanner) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winBanner) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 18)
	w.fieldMap["id"] = w.ID
	w.fieldMap["type"] = w.Type
	w.fieldMap["img"] = w.Img
	w.fieldMap["href"] = w.Href
	w.fieldMap["sort"] = w.Sort
	w.fieldMap["status"] = w.Status
	w.fieldMap["device"] = w.Device
	w.fieldMap["language"] = w.Language
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["created_by"] = w.CreatedBy
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["jump_type"] = w.JumpType
	w.fieldMap["slot_id"] = w.SlotID
	w.fieldMap["game_id"] = w.GameID
	w.fieldMap["game_group_id"] = w.GameGroupID
	w.fieldMap["plat_id"] = w.PlatID
	w.fieldMap["operator_name"] = w.OperatorName
	w.fieldMap["updated_by"] = w.UpdatedBy
}

func (w winBanner) clone(db *gorm.DB) winBanner {
	w.winBannerDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winBanner) replaceDB(db *gorm.DB) winBanner {
	w.winBannerDo.ReplaceDB(db)
	return w
}

type winBannerDo struct{ gen.DO }

func (w winBannerDo) Debug() *winBannerDo {
	return w.withDO(w.DO.Debug())
}

func (w winBannerDo) WithContext(ctx context.Context) *winBannerDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winBannerDo) ReadDB() *winBannerDo {
	return w.Clauses(dbresolver.Read)
}

func (w winBannerDo) WriteDB() *winBannerDo {
	return w.Clauses(dbresolver.Write)
}

func (w winBannerDo) Session(config *gorm.Session) *winBannerDo {
	return w.withDO(w.DO.Session(config))
}

func (w winBannerDo) Clauses(conds ...clause.Expression) *winBannerDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winBannerDo) Returning(value interface{}, columns ...string) *winBannerDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winBannerDo) Not(conds ...gen.Condition) *winBannerDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winBannerDo) Or(conds ...gen.Condition) *winBannerDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winBannerDo) Select(conds ...field.Expr) *winBannerDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winBannerDo) Where(conds ...gen.Condition) *winBannerDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winBannerDo) Order(conds ...field.Expr) *winBannerDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winBannerDo) Distinct(cols ...field.Expr) *winBannerDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winBannerDo) Omit(cols ...field.Expr) *winBannerDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winBannerDo) Join(table schema.Tabler, on ...field.Expr) *winBannerDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winBannerDo) LeftJoin(table schema.Tabler, on ...field.Expr) *winBannerDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winBannerDo) RightJoin(table schema.Tabler, on ...field.Expr) *winBannerDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winBannerDo) Group(cols ...field.Expr) *winBannerDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winBannerDo) Having(conds ...gen.Condition) *winBannerDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winBannerDo) Limit(limit int) *winBannerDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winBannerDo) Offset(offset int) *winBannerDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winBannerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *winBannerDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winBannerDo) Unscoped() *winBannerDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winBannerDo) Create(values ...*model.WinBanner) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winBannerDo) CreateInBatches(values []*model.WinBanner, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winBannerDo) Save(values ...*model.WinBanner) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winBannerDo) First() (*model.WinBanner, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinBanner), nil
	}
}

func (w winBannerDo) Take() (*model.WinBanner, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinBanner), nil
	}
}

func (w winBannerDo) Last() (*model.WinBanner, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinBanner), nil
	}
}

func (w winBannerDo) Find() ([]*model.WinBanner, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinBanner), err
}

func (w winBannerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinBanner, err error) {
	buf := make([]*model.WinBanner, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winBannerDo) FindInBatches(result *[]*model.WinBanner, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winBannerDo) Attrs(attrs ...field.AssignExpr) *winBannerDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winBannerDo) Assign(attrs ...field.AssignExpr) *winBannerDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winBannerDo) Joins(fields ...field.RelationField) *winBannerDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winBannerDo) Preload(fields ...field.RelationField) *winBannerDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winBannerDo) FirstOrInit() (*model.WinBanner, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinBanner), nil
	}
}

func (w winBannerDo) FirstOrCreate() (*model.WinBanner, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinBanner), nil
	}
}

func (w winBannerDo) FindByPage(offset int, limit int) (result []*model.WinBanner, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winBannerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winBannerDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winBannerDo) Delete(models ...*model.WinBanner) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winBannerDo) withDO(do gen.Dao) *winBannerDo {
	w.DO = *do.(*gen.DO)
	return w
}
