// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package oldmain

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"migration/pkg/model"
)

func newGameProviderSubtype(db *gorm.DB, opts ...gen.DOOption) gameProviderSubtype {
	_gameProviderSubtype := gameProviderSubtype{}

	_gameProviderSubtype.gameProviderSubtypeDo.UseDB(db, opts...)
	_gameProviderSubtype.gameProviderSubtypeDo.UseModel(&model.GameProviderSubtype{})

	tableName := _gameProviderSubtype.gameProviderSubtypeDo.TableName()
	_gameProviderSubtype.ALL = field.NewAsterisk(tableName)
	_gameProviderSubtype.ID = field.NewInt32(tableName, "id")
	_gameProviderSubtype.Code = field.NewString(tableName, "code")
	_gameProviderSubtype.Name = field.NewString(tableName, "name")
	_gameProviderSubtype.Icon = field.NewString(tableName, "icon")
	_gameProviderSubtype.GameTypeID = field.NewInt32(tableName, "game_type_id")
	_gameProviderSubtype.GameProviderID = field.NewInt32(tableName, "game_provider_id")
	_gameProviderSubtype.ProviderRate = field.NewFloat64(tableName, "provider_rate")
	_gameProviderSubtype.Maintenance = field.NewString(tableName, "maintenance")
	_gameProviderSubtype.GameCount = field.NewInt32(tableName, "game_count")
	_gameProviderSubtype.Remark = field.NewString(tableName, "remark")
	_gameProviderSubtype.Sort = field.NewInt32(tableName, "sort")
	_gameProviderSubtype.Status = field.NewInt32(tableName, "status")
	_gameProviderSubtype.CreatedAt = field.NewInt32(tableName, "created_at")
	_gameProviderSubtype.UpdatedAt = field.NewInt32(tableName, "updated_at")
	_gameProviderSubtype.UpdatedBy = field.NewString(tableName, "updated_by")
	_gameProviderSubtype.CreatedBy = field.NewString(tableName, "created_by")
	_gameProviderSubtype.GamePagcorID = field.NewString(tableName, "game_pagcor_id")
	_gameProviderSubtype.PagcorRate = field.NewFloat64(tableName, "pagcor_rate")

	_gameProviderSubtype.fillFieldMap()

	return _gameProviderSubtype
}

// gameProviderSubtype 厂商游戏类型表
type gameProviderSubtype struct {
	gameProviderSubtypeDo

	ALL            field.Asterisk
	ID             field.Int32
	Code           field.String  // 平台编码
	Name           field.String  // 名称
	Icon           field.String  // 图标
	GameTypeID     field.Int32   // 自定义游戏类型ID:1-体育 2-电子 3-真人 4-捕鱼 5-棋牌 6-电竞 7-彩票 8-动物 9-快速 10-技能 11-table game
	GameProviderID field.Int32   // 游戏供应商列表ID
	ProviderRate   field.Float64 // 厂商税收比例
	Maintenance    field.String  // 维护时间
	GameCount      field.Int32   // 分类游戏数量
	Remark         field.String  // 备注
	Sort           field.Int32   // 排序: 从高到低
	Status         field.Int32   // 状态: 1-启用 0-停用
	CreatedAt      field.Int32
	UpdatedAt      field.Int32
	UpdatedBy      field.String  // 最后更新人
	CreatedBy      field.String  // 创建人
	GamePagcorID   field.String  // pagcor游戏分类表ID
	PagcorRate     field.Float64 // pagcor税率

	fieldMap map[string]field.Expr
}

func (g gameProviderSubtype) Table(newTableName string) *gameProviderSubtype {
	g.gameProviderSubtypeDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gameProviderSubtype) As(alias string) *gameProviderSubtype {
	g.gameProviderSubtypeDo.DO = *(g.gameProviderSubtypeDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gameProviderSubtype) updateTableName(table string) *gameProviderSubtype {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt32(table, "id")
	g.Code = field.NewString(table, "code")
	g.Name = field.NewString(table, "name")
	g.Icon = field.NewString(table, "icon")
	g.GameTypeID = field.NewInt32(table, "game_type_id")
	g.GameProviderID = field.NewInt32(table, "game_provider_id")
	g.ProviderRate = field.NewFloat64(table, "provider_rate")
	g.Maintenance = field.NewString(table, "maintenance")
	g.GameCount = field.NewInt32(table, "game_count")
	g.Remark = field.NewString(table, "remark")
	g.Sort = field.NewInt32(table, "sort")
	g.Status = field.NewInt32(table, "status")
	g.CreatedAt = field.NewInt32(table, "created_at")
	g.UpdatedAt = field.NewInt32(table, "updated_at")
	g.UpdatedBy = field.NewString(table, "updated_by")
	g.CreatedBy = field.NewString(table, "created_by")
	g.GamePagcorID = field.NewString(table, "game_pagcor_id")
	g.PagcorRate = field.NewFloat64(table, "pagcor_rate")

	g.fillFieldMap()

	return g
}

func (g *gameProviderSubtype) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gameProviderSubtype) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 18)
	g.fieldMap["id"] = g.ID
	g.fieldMap["code"] = g.Code
	g.fieldMap["name"] = g.Name
	g.fieldMap["icon"] = g.Icon
	g.fieldMap["game_type_id"] = g.GameTypeID
	g.fieldMap["game_provider_id"] = g.GameProviderID
	g.fieldMap["provider_rate"] = g.ProviderRate
	g.fieldMap["maintenance"] = g.Maintenance
	g.fieldMap["game_count"] = g.GameCount
	g.fieldMap["remark"] = g.Remark
	g.fieldMap["sort"] = g.Sort
	g.fieldMap["status"] = g.Status
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["updated_by"] = g.UpdatedBy
	g.fieldMap["created_by"] = g.CreatedBy
	g.fieldMap["game_pagcor_id"] = g.GamePagcorID
	g.fieldMap["pagcor_rate"] = g.PagcorRate
}

func (g gameProviderSubtype) clone(db *gorm.DB) gameProviderSubtype {
	g.gameProviderSubtypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gameProviderSubtype) replaceDB(db *gorm.DB) gameProviderSubtype {
	g.gameProviderSubtypeDo.ReplaceDB(db)
	return g
}

type gameProviderSubtypeDo struct{ gen.DO }

func (g gameProviderSubtypeDo) Debug() *gameProviderSubtypeDo {
	return g.withDO(g.DO.Debug())
}

func (g gameProviderSubtypeDo) WithContext(ctx context.Context) *gameProviderSubtypeDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gameProviderSubtypeDo) ReadDB() *gameProviderSubtypeDo {
	return g.Clauses(dbresolver.Read)
}

func (g gameProviderSubtypeDo) WriteDB() *gameProviderSubtypeDo {
	return g.Clauses(dbresolver.Write)
}

func (g gameProviderSubtypeDo) Session(config *gorm.Session) *gameProviderSubtypeDo {
	return g.withDO(g.DO.Session(config))
}

func (g gameProviderSubtypeDo) Clauses(conds ...clause.Expression) *gameProviderSubtypeDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gameProviderSubtypeDo) Returning(value interface{}, columns ...string) *gameProviderSubtypeDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gameProviderSubtypeDo) Not(conds ...gen.Condition) *gameProviderSubtypeDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gameProviderSubtypeDo) Or(conds ...gen.Condition) *gameProviderSubtypeDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gameProviderSubtypeDo) Select(conds ...field.Expr) *gameProviderSubtypeDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gameProviderSubtypeDo) Where(conds ...gen.Condition) *gameProviderSubtypeDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gameProviderSubtypeDo) Order(conds ...field.Expr) *gameProviderSubtypeDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gameProviderSubtypeDo) Distinct(cols ...field.Expr) *gameProviderSubtypeDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gameProviderSubtypeDo) Omit(cols ...field.Expr) *gameProviderSubtypeDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gameProviderSubtypeDo) Join(table schema.Tabler, on ...field.Expr) *gameProviderSubtypeDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gameProviderSubtypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *gameProviderSubtypeDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gameProviderSubtypeDo) RightJoin(table schema.Tabler, on ...field.Expr) *gameProviderSubtypeDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gameProviderSubtypeDo) Group(cols ...field.Expr) *gameProviderSubtypeDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gameProviderSubtypeDo) Having(conds ...gen.Condition) *gameProviderSubtypeDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gameProviderSubtypeDo) Limit(limit int) *gameProviderSubtypeDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gameProviderSubtypeDo) Offset(offset int) *gameProviderSubtypeDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gameProviderSubtypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *gameProviderSubtypeDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gameProviderSubtypeDo) Unscoped() *gameProviderSubtypeDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gameProviderSubtypeDo) Create(values ...*model.GameProviderSubtype) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gameProviderSubtypeDo) CreateInBatches(values []*model.GameProviderSubtype, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gameProviderSubtypeDo) Save(values ...*model.GameProviderSubtype) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gameProviderSubtypeDo) First() (*model.GameProviderSubtype, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameProviderSubtype), nil
	}
}

func (g gameProviderSubtypeDo) Take() (*model.GameProviderSubtype, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameProviderSubtype), nil
	}
}

func (g gameProviderSubtypeDo) Last() (*model.GameProviderSubtype, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameProviderSubtype), nil
	}
}

func (g gameProviderSubtypeDo) Find() ([]*model.GameProviderSubtype, error) {
	result, err := g.DO.Find()
	return result.([]*model.GameProviderSubtype), err
}

func (g gameProviderSubtypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GameProviderSubtype, err error) {
	buf := make([]*model.GameProviderSubtype, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gameProviderSubtypeDo) FindInBatches(result *[]*model.GameProviderSubtype, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gameProviderSubtypeDo) Attrs(attrs ...field.AssignExpr) *gameProviderSubtypeDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gameProviderSubtypeDo) Assign(attrs ...field.AssignExpr) *gameProviderSubtypeDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gameProviderSubtypeDo) Joins(fields ...field.RelationField) *gameProviderSubtypeDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gameProviderSubtypeDo) Preload(fields ...field.RelationField) *gameProviderSubtypeDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gameProviderSubtypeDo) FirstOrInit() (*model.GameProviderSubtype, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameProviderSubtype), nil
	}
}

func (g gameProviderSubtypeDo) FirstOrCreate() (*model.GameProviderSubtype, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameProviderSubtype), nil
	}
}

func (g gameProviderSubtypeDo) FindByPage(offset int, limit int) (result []*model.GameProviderSubtype, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gameProviderSubtypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gameProviderSubtypeDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gameProviderSubtypeDo) Delete(models ...*model.GameProviderSubtype) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gameProviderSubtypeDo) withDO(do gen.Dao) *gameProviderSubtypeDo {
	g.DO = *do.(*gen.DO)
	return g
}
