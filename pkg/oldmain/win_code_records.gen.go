// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package oldmain

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"migration/pkg/model"
)

func newWinCodeRecord(db *gorm.DB, opts ...gen.DOOption) winCodeRecord {
	_winCodeRecord := winCodeRecord{}

	_winCodeRecord.winCodeRecordDo.UseDB(db, opts...)
	_winCodeRecord.winCodeRecordDo.UseModel(&model.WinCodeRecord{})

	tableName := _winCodeRecord.winCodeRecordDo.TableName()
	_winCodeRecord.ALL = field.NewAsterisk(tableName)
	_winCodeRecord.ID = field.NewInt32(tableName, "id")
	_winCodeRecord.UID = field.NewInt32(tableName, "uid")
	_winCodeRecord.Username = field.NewString(tableName, "username")
	_winCodeRecord.Coin = field.NewFloat64(tableName, "coin")
	_winCodeRecord.CodeRequire = field.NewFloat64(tableName, "code_require")
	_winCodeRecord.FlowClaim = field.NewFloat64(tableName, "flow_claim")
	_winCodeRecord.RealCode = field.NewFloat64(tableName, "real_code")
	_winCodeRecord.VipRealCode = field.NewFloat64(tableName, "vip_real_code")
	_winCodeRecord.Category = field.NewInt32(tableName, "category")
	_winCodeRecord.ReferID = field.NewInt64(tableName, "refer_id")
	_winCodeRecord.ReferWithdrawalID = field.NewInt64(tableName, "refer_withdrawal_id")
	_winCodeRecord.Remarks = field.NewString(tableName, "remarks")
	_winCodeRecord.Status = field.NewInt32(tableName, "status")
	_winCodeRecord.CreatedAt = field.NewInt32(tableName, "created_at")
	_winCodeRecord.UpdatedAt = field.NewInt32(tableName, "updated_at")
	_winCodeRecord.ActivityID = field.NewInt64(tableName, "activity_id")
	_winCodeRecord.OpUser = field.NewString(tableName, "op_user")
	_winCodeRecord.Flag = field.NewInt32(tableName, "flag")
	_winCodeRecord.IsAudit = field.NewInt32(tableName, "is_audit")
	_winCodeRecord.BindingID = field.NewInt64(tableName, "binding_id")

	_winCodeRecord.fillFieldMap()

	return _winCodeRecord
}

// winCodeRecord 打码量记录表
type winCodeRecord struct {
	winCodeRecordDo

	ALL               field.Asterisk
	ID                field.Int32
	UID               field.Int32   // UID
	Username          field.String  // 用户名
	Coin              field.Float64 // 金额
	CodeRequire       field.Float64 // 需求打码量
	FlowClaim         field.Float64 // 需求打码倍数
	RealCode          field.Float64 // 实际打码量
	VipRealCode       field.Float64 // vip打码量
	Category          field.Int32   // 类型:1-充值 2-签到活动 3- 系统调账 4注册活动 5-特定活动,6-救济金活动，7-充值送活动
	ReferID           field.Int64   // 关联ID
	ReferWithdrawalID field.Int64   // 关联提款ID
	Remarks           field.String  // 备注
	Status            field.Int32   // 状态:0-未结算 1-结算
	CreatedAt         field.Int32
	UpdatedAt         field.Int32
	ActivityID        field.Int64  // 活动ID
	OpUser            field.String // 操作人
	Flag              field.Int32  // 是否需要修改标记：0-正常，1-大于，2-小于，3-等于
	IsAudit           field.Int32  // 是否被強制稽核過:0否 1是
	BindingID         field.Int64  // 充值活動碼量與彩金活動碼量綁定Id

	fieldMap map[string]field.Expr
}

func (w winCodeRecord) Table(newTableName string) *winCodeRecord {
	w.winCodeRecordDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winCodeRecord) As(alias string) *winCodeRecord {
	w.winCodeRecordDo.DO = *(w.winCodeRecordDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winCodeRecord) updateTableName(table string) *winCodeRecord {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt32(table, "id")
	w.UID = field.NewInt32(table, "uid")
	w.Username = field.NewString(table, "username")
	w.Coin = field.NewFloat64(table, "coin")
	w.CodeRequire = field.NewFloat64(table, "code_require")
	w.FlowClaim = field.NewFloat64(table, "flow_claim")
	w.RealCode = field.NewFloat64(table, "real_code")
	w.VipRealCode = field.NewFloat64(table, "vip_real_code")
	w.Category = field.NewInt32(table, "category")
	w.ReferID = field.NewInt64(table, "refer_id")
	w.ReferWithdrawalID = field.NewInt64(table, "refer_withdrawal_id")
	w.Remarks = field.NewString(table, "remarks")
	w.Status = field.NewInt32(table, "status")
	w.CreatedAt = field.NewInt32(table, "created_at")
	w.UpdatedAt = field.NewInt32(table, "updated_at")
	w.ActivityID = field.NewInt64(table, "activity_id")
	w.OpUser = field.NewString(table, "op_user")
	w.Flag = field.NewInt32(table, "flag")
	w.IsAudit = field.NewInt32(table, "is_audit")
	w.BindingID = field.NewInt64(table, "binding_id")

	w.fillFieldMap()

	return w
}

func (w *winCodeRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winCodeRecord) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 20)
	w.fieldMap["id"] = w.ID
	w.fieldMap["uid"] = w.UID
	w.fieldMap["username"] = w.Username
	w.fieldMap["coin"] = w.Coin
	w.fieldMap["code_require"] = w.CodeRequire
	w.fieldMap["flow_claim"] = w.FlowClaim
	w.fieldMap["real_code"] = w.RealCode
	w.fieldMap["vip_real_code"] = w.VipRealCode
	w.fieldMap["category"] = w.Category
	w.fieldMap["refer_id"] = w.ReferID
	w.fieldMap["refer_withdrawal_id"] = w.ReferWithdrawalID
	w.fieldMap["remarks"] = w.Remarks
	w.fieldMap["status"] = w.Status
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["activity_id"] = w.ActivityID
	w.fieldMap["op_user"] = w.OpUser
	w.fieldMap["flag"] = w.Flag
	w.fieldMap["is_audit"] = w.IsAudit
	w.fieldMap["binding_id"] = w.BindingID
}

func (w winCodeRecord) clone(db *gorm.DB) winCodeRecord {
	w.winCodeRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winCodeRecord) replaceDB(db *gorm.DB) winCodeRecord {
	w.winCodeRecordDo.ReplaceDB(db)
	return w
}

type winCodeRecordDo struct{ gen.DO }

func (w winCodeRecordDo) Debug() *winCodeRecordDo {
	return w.withDO(w.DO.Debug())
}

func (w winCodeRecordDo) WithContext(ctx context.Context) *winCodeRecordDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winCodeRecordDo) ReadDB() *winCodeRecordDo {
	return w.Clauses(dbresolver.Read)
}

func (w winCodeRecordDo) WriteDB() *winCodeRecordDo {
	return w.Clauses(dbresolver.Write)
}

func (w winCodeRecordDo) Session(config *gorm.Session) *winCodeRecordDo {
	return w.withDO(w.DO.Session(config))
}

func (w winCodeRecordDo) Clauses(conds ...clause.Expression) *winCodeRecordDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winCodeRecordDo) Returning(value interface{}, columns ...string) *winCodeRecordDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winCodeRecordDo) Not(conds ...gen.Condition) *winCodeRecordDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winCodeRecordDo) Or(conds ...gen.Condition) *winCodeRecordDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winCodeRecordDo) Select(conds ...field.Expr) *winCodeRecordDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winCodeRecordDo) Where(conds ...gen.Condition) *winCodeRecordDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winCodeRecordDo) Order(conds ...field.Expr) *winCodeRecordDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winCodeRecordDo) Distinct(cols ...field.Expr) *winCodeRecordDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winCodeRecordDo) Omit(cols ...field.Expr) *winCodeRecordDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winCodeRecordDo) Join(table schema.Tabler, on ...field.Expr) *winCodeRecordDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winCodeRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) *winCodeRecordDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winCodeRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) *winCodeRecordDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winCodeRecordDo) Group(cols ...field.Expr) *winCodeRecordDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winCodeRecordDo) Having(conds ...gen.Condition) *winCodeRecordDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winCodeRecordDo) Limit(limit int) *winCodeRecordDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winCodeRecordDo) Offset(offset int) *winCodeRecordDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winCodeRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *winCodeRecordDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winCodeRecordDo) Unscoped() *winCodeRecordDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winCodeRecordDo) Create(values ...*model.WinCodeRecord) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winCodeRecordDo) CreateInBatches(values []*model.WinCodeRecord, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winCodeRecordDo) Save(values ...*model.WinCodeRecord) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winCodeRecordDo) First() (*model.WinCodeRecord, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCodeRecord), nil
	}
}

func (w winCodeRecordDo) Take() (*model.WinCodeRecord, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCodeRecord), nil
	}
}

func (w winCodeRecordDo) Last() (*model.WinCodeRecord, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCodeRecord), nil
	}
}

func (w winCodeRecordDo) Find() ([]*model.WinCodeRecord, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinCodeRecord), err
}

func (w winCodeRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinCodeRecord, err error) {
	buf := make([]*model.WinCodeRecord, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winCodeRecordDo) FindInBatches(result *[]*model.WinCodeRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winCodeRecordDo) Attrs(attrs ...field.AssignExpr) *winCodeRecordDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winCodeRecordDo) Assign(attrs ...field.AssignExpr) *winCodeRecordDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winCodeRecordDo) Joins(fields ...field.RelationField) *winCodeRecordDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winCodeRecordDo) Preload(fields ...field.RelationField) *winCodeRecordDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winCodeRecordDo) FirstOrInit() (*model.WinCodeRecord, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCodeRecord), nil
	}
}

func (w winCodeRecordDo) FirstOrCreate() (*model.WinCodeRecord, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCodeRecord), nil
	}
}

func (w winCodeRecordDo) FindByPage(offset int, limit int) (result []*model.WinCodeRecord, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winCodeRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winCodeRecordDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winCodeRecordDo) Delete(models ...*model.WinCodeRecord) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winCodeRecordDo) withDO(do gen.Dao) *winCodeRecordDo {
	w.DO = *do.(*gen.DO)
	return w
}
