// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package oldmain

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"migration/pkg/model"
)

func newWinUserVip(db *gorm.DB, opts ...gen.DOOption) winUserVip {
	_winUserVip := winUserVip{}

	_winUserVip.winUserVipDo.UseDB(db, opts...)
	_winUserVip.winUserVipDo.UseModel(&model.WinUserVip{})

	tableName := _winUserVip.winUserVipDo.TableName()
	_winUserVip.ALL = field.NewAsterisk(tableName)
	_winUserVip.ID = field.NewInt64(tableName, "id")
	_winUserVip.Code = field.NewString(tableName, "code")
	_winUserVip.Name = field.NewString(tableName, "name")
	_winUserVip.Icon = field.NewString(tableName, "icon")
	_winUserVip.ValidAmount = field.NewFloat64(tableName, "valid_amount")
	_winUserVip.DayBonus = field.NewFloat64(tableName, "day_Bonus")
	_winUserVip.CreatedAt = field.NewInt32(tableName, "created_at")
	_winUserVip.UpdatedAt = field.NewInt32(tableName, "updated_at")
	_winUserVip.UpdatedUser = field.NewString(tableName, "updated_user")
	_winUserVip.Status = field.NewInt32(tableName, "status")
	_winUserVip.IsPopUp = field.NewInt32(tableName, "is_pop_up")
	_winUserVip.RoleRecharge = field.NewFloat64(tableName, "role_recharge")

	_winUserVip.fillFieldMap()

	return _winUserVip
}

// winUserVip VIP会员等级
type winUserVip struct {
	winUserVipDo

	ALL          field.Asterisk
	ID           field.Int64   // 自增主键
	Code         field.String  // 会员等级
	Name         field.String  // 等级名称
	Icon         field.String  // VIP图标
	ValidAmount  field.Float64 // 有效投注额
	DayBonus     field.Float64 // 日奖金
	CreatedAt    field.Int32   // 创建时间
	UpdatedAt    field.Int32   // 修改时间
	UpdatedUser  field.String  // 最后修改人
	Status       field.Int32   // 状态：0-无效，1-有效
	IsPopUp      field.Int32   // 是否弹窗:0-不弹窗 1-弹窗
	RoleRecharge field.Float64 // 最低充值金额

	fieldMap map[string]field.Expr
}

func (w winUserVip) Table(newTableName string) *winUserVip {
	w.winUserVipDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winUserVip) As(alias string) *winUserVip {
	w.winUserVipDo.DO = *(w.winUserVipDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winUserVip) updateTableName(table string) *winUserVip {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.Code = field.NewString(table, "code")
	w.Name = field.NewString(table, "name")
	w.Icon = field.NewString(table, "icon")
	w.ValidAmount = field.NewFloat64(table, "valid_amount")
	w.DayBonus = field.NewFloat64(table, "day_Bonus")
	w.CreatedAt = field.NewInt32(table, "created_at")
	w.UpdatedAt = field.NewInt32(table, "updated_at")
	w.UpdatedUser = field.NewString(table, "updated_user")
	w.Status = field.NewInt32(table, "status")
	w.IsPopUp = field.NewInt32(table, "is_pop_up")
	w.RoleRecharge = field.NewFloat64(table, "role_recharge")

	w.fillFieldMap()

	return w
}

func (w *winUserVip) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winUserVip) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 12)
	w.fieldMap["id"] = w.ID
	w.fieldMap["code"] = w.Code
	w.fieldMap["name"] = w.Name
	w.fieldMap["icon"] = w.Icon
	w.fieldMap["valid_amount"] = w.ValidAmount
	w.fieldMap["day_Bonus"] = w.DayBonus
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["updated_user"] = w.UpdatedUser
	w.fieldMap["status"] = w.Status
	w.fieldMap["is_pop_up"] = w.IsPopUp
	w.fieldMap["role_recharge"] = w.RoleRecharge
}

func (w winUserVip) clone(db *gorm.DB) winUserVip {
	w.winUserVipDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winUserVip) replaceDB(db *gorm.DB) winUserVip {
	w.winUserVipDo.ReplaceDB(db)
	return w
}

type winUserVipDo struct{ gen.DO }

func (w winUserVipDo) Debug() *winUserVipDo {
	return w.withDO(w.DO.Debug())
}

func (w winUserVipDo) WithContext(ctx context.Context) *winUserVipDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winUserVipDo) ReadDB() *winUserVipDo {
	return w.Clauses(dbresolver.Read)
}

func (w winUserVipDo) WriteDB() *winUserVipDo {
	return w.Clauses(dbresolver.Write)
}

func (w winUserVipDo) Session(config *gorm.Session) *winUserVipDo {
	return w.withDO(w.DO.Session(config))
}

func (w winUserVipDo) Clauses(conds ...clause.Expression) *winUserVipDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winUserVipDo) Returning(value interface{}, columns ...string) *winUserVipDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winUserVipDo) Not(conds ...gen.Condition) *winUserVipDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winUserVipDo) Or(conds ...gen.Condition) *winUserVipDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winUserVipDo) Select(conds ...field.Expr) *winUserVipDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winUserVipDo) Where(conds ...gen.Condition) *winUserVipDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winUserVipDo) Order(conds ...field.Expr) *winUserVipDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winUserVipDo) Distinct(cols ...field.Expr) *winUserVipDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winUserVipDo) Omit(cols ...field.Expr) *winUserVipDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winUserVipDo) Join(table schema.Tabler, on ...field.Expr) *winUserVipDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winUserVipDo) LeftJoin(table schema.Tabler, on ...field.Expr) *winUserVipDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winUserVipDo) RightJoin(table schema.Tabler, on ...field.Expr) *winUserVipDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winUserVipDo) Group(cols ...field.Expr) *winUserVipDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winUserVipDo) Having(conds ...gen.Condition) *winUserVipDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winUserVipDo) Limit(limit int) *winUserVipDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winUserVipDo) Offset(offset int) *winUserVipDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winUserVipDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *winUserVipDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winUserVipDo) Unscoped() *winUserVipDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winUserVipDo) Create(values ...*model.WinUserVip) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winUserVipDo) CreateInBatches(values []*model.WinUserVip, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winUserVipDo) Save(values ...*model.WinUserVip) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winUserVipDo) First() (*model.WinUserVip, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserVip), nil
	}
}

func (w winUserVipDo) Take() (*model.WinUserVip, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserVip), nil
	}
}

func (w winUserVipDo) Last() (*model.WinUserVip, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserVip), nil
	}
}

func (w winUserVipDo) Find() ([]*model.WinUserVip, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinUserVip), err
}

func (w winUserVipDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinUserVip, err error) {
	buf := make([]*model.WinUserVip, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winUserVipDo) FindInBatches(result *[]*model.WinUserVip, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winUserVipDo) Attrs(attrs ...field.AssignExpr) *winUserVipDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winUserVipDo) Assign(attrs ...field.AssignExpr) *winUserVipDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winUserVipDo) Joins(fields ...field.RelationField) *winUserVipDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winUserVipDo) Preload(fields ...field.RelationField) *winUserVipDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winUserVipDo) FirstOrInit() (*model.WinUserVip, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserVip), nil
	}
}

func (w winUserVipDo) FirstOrCreate() (*model.WinUserVip, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserVip), nil
	}
}

func (w winUserVipDo) FindByPage(offset int, limit int) (result []*model.WinUserVip, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winUserVipDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winUserVipDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winUserVipDo) Delete(models ...*model.WinUserVip) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winUserVipDo) withDO(do gen.Dao) *winUserVipDo {
	w.DO = *do.(*gen.DO)
	return w
}
