// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package oldmain

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"migration/pkg/model"
)

func newXxlJobGroup(db *gorm.DB, opts ...gen.DOOption) xxlJobGroup {
	_xxlJobGroup := xxlJobGroup{}

	_xxlJobGroup.xxlJobGroupDo.UseDB(db, opts...)
	_xxlJobGroup.xxlJobGroupDo.UseModel(&model.XxlJobGroup{})

	tableName := _xxlJobGroup.xxlJobGroupDo.TableName()
	_xxlJobGroup.ALL = field.NewAsterisk(tableName)
	_xxlJobGroup.ID = field.NewInt32(tableName, "id")
	_xxlJobGroup.AppName = field.NewString(tableName, "app_name")
	_xxlJobGroup.Title = field.NewString(tableName, "title")
	_xxlJobGroup.AddressType = field.NewInt32(tableName, "address_type")
	_xxlJobGroup.AddressList = field.NewString(tableName, "address_list")
	_xxlJobGroup.UpdateTime = field.NewTime(tableName, "update_time")

	_xxlJobGroup.fillFieldMap()

	return _xxlJobGroup
}

type xxlJobGroup struct {
	xxlJobGroupDo

	ALL         field.Asterisk
	ID          field.Int32
	AppName     field.String // 执行器AppName
	Title       field.String // 执行器名称
	AddressType field.Int32  // 执行器地址类型：0=自动注册、1=手动录入
	AddressList field.String // 执行器地址列表，多地址逗号分隔
	UpdateTime  field.Time

	fieldMap map[string]field.Expr
}

func (x xxlJobGroup) Table(newTableName string) *xxlJobGroup {
	x.xxlJobGroupDo.UseTable(newTableName)
	return x.updateTableName(newTableName)
}

func (x xxlJobGroup) As(alias string) *xxlJobGroup {
	x.xxlJobGroupDo.DO = *(x.xxlJobGroupDo.As(alias).(*gen.DO))
	return x.updateTableName(alias)
}

func (x *xxlJobGroup) updateTableName(table string) *xxlJobGroup {
	x.ALL = field.NewAsterisk(table)
	x.ID = field.NewInt32(table, "id")
	x.AppName = field.NewString(table, "app_name")
	x.Title = field.NewString(table, "title")
	x.AddressType = field.NewInt32(table, "address_type")
	x.AddressList = field.NewString(table, "address_list")
	x.UpdateTime = field.NewTime(table, "update_time")

	x.fillFieldMap()

	return x
}

func (x *xxlJobGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := x.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (x *xxlJobGroup) fillFieldMap() {
	x.fieldMap = make(map[string]field.Expr, 6)
	x.fieldMap["id"] = x.ID
	x.fieldMap["app_name"] = x.AppName
	x.fieldMap["title"] = x.Title
	x.fieldMap["address_type"] = x.AddressType
	x.fieldMap["address_list"] = x.AddressList
	x.fieldMap["update_time"] = x.UpdateTime
}

func (x xxlJobGroup) clone(db *gorm.DB) xxlJobGroup {
	x.xxlJobGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return x
}

func (x xxlJobGroup) replaceDB(db *gorm.DB) xxlJobGroup {
	x.xxlJobGroupDo.ReplaceDB(db)
	return x
}

type xxlJobGroupDo struct{ gen.DO }

func (x xxlJobGroupDo) Debug() *xxlJobGroupDo {
	return x.withDO(x.DO.Debug())
}

func (x xxlJobGroupDo) WithContext(ctx context.Context) *xxlJobGroupDo {
	return x.withDO(x.DO.WithContext(ctx))
}

func (x xxlJobGroupDo) ReadDB() *xxlJobGroupDo {
	return x.Clauses(dbresolver.Read)
}

func (x xxlJobGroupDo) WriteDB() *xxlJobGroupDo {
	return x.Clauses(dbresolver.Write)
}

func (x xxlJobGroupDo) Session(config *gorm.Session) *xxlJobGroupDo {
	return x.withDO(x.DO.Session(config))
}

func (x xxlJobGroupDo) Clauses(conds ...clause.Expression) *xxlJobGroupDo {
	return x.withDO(x.DO.Clauses(conds...))
}

func (x xxlJobGroupDo) Returning(value interface{}, columns ...string) *xxlJobGroupDo {
	return x.withDO(x.DO.Returning(value, columns...))
}

func (x xxlJobGroupDo) Not(conds ...gen.Condition) *xxlJobGroupDo {
	return x.withDO(x.DO.Not(conds...))
}

func (x xxlJobGroupDo) Or(conds ...gen.Condition) *xxlJobGroupDo {
	return x.withDO(x.DO.Or(conds...))
}

func (x xxlJobGroupDo) Select(conds ...field.Expr) *xxlJobGroupDo {
	return x.withDO(x.DO.Select(conds...))
}

func (x xxlJobGroupDo) Where(conds ...gen.Condition) *xxlJobGroupDo {
	return x.withDO(x.DO.Where(conds...))
}

func (x xxlJobGroupDo) Order(conds ...field.Expr) *xxlJobGroupDo {
	return x.withDO(x.DO.Order(conds...))
}

func (x xxlJobGroupDo) Distinct(cols ...field.Expr) *xxlJobGroupDo {
	return x.withDO(x.DO.Distinct(cols...))
}

func (x xxlJobGroupDo) Omit(cols ...field.Expr) *xxlJobGroupDo {
	return x.withDO(x.DO.Omit(cols...))
}

func (x xxlJobGroupDo) Join(table schema.Tabler, on ...field.Expr) *xxlJobGroupDo {
	return x.withDO(x.DO.Join(table, on...))
}

func (x xxlJobGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) *xxlJobGroupDo {
	return x.withDO(x.DO.LeftJoin(table, on...))
}

func (x xxlJobGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) *xxlJobGroupDo {
	return x.withDO(x.DO.RightJoin(table, on...))
}

func (x xxlJobGroupDo) Group(cols ...field.Expr) *xxlJobGroupDo {
	return x.withDO(x.DO.Group(cols...))
}

func (x xxlJobGroupDo) Having(conds ...gen.Condition) *xxlJobGroupDo {
	return x.withDO(x.DO.Having(conds...))
}

func (x xxlJobGroupDo) Limit(limit int) *xxlJobGroupDo {
	return x.withDO(x.DO.Limit(limit))
}

func (x xxlJobGroupDo) Offset(offset int) *xxlJobGroupDo {
	return x.withDO(x.DO.Offset(offset))
}

func (x xxlJobGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *xxlJobGroupDo {
	return x.withDO(x.DO.Scopes(funcs...))
}

func (x xxlJobGroupDo) Unscoped() *xxlJobGroupDo {
	return x.withDO(x.DO.Unscoped())
}

func (x xxlJobGroupDo) Create(values ...*model.XxlJobGroup) error {
	if len(values) == 0 {
		return nil
	}
	return x.DO.Create(values)
}

func (x xxlJobGroupDo) CreateInBatches(values []*model.XxlJobGroup, batchSize int) error {
	return x.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (x xxlJobGroupDo) Save(values ...*model.XxlJobGroup) error {
	if len(values) == 0 {
		return nil
	}
	return x.DO.Save(values)
}

func (x xxlJobGroupDo) First() (*model.XxlJobGroup, error) {
	if result, err := x.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.XxlJobGroup), nil
	}
}

func (x xxlJobGroupDo) Take() (*model.XxlJobGroup, error) {
	if result, err := x.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.XxlJobGroup), nil
	}
}

func (x xxlJobGroupDo) Last() (*model.XxlJobGroup, error) {
	if result, err := x.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.XxlJobGroup), nil
	}
}

func (x xxlJobGroupDo) Find() ([]*model.XxlJobGroup, error) {
	result, err := x.DO.Find()
	return result.([]*model.XxlJobGroup), err
}

func (x xxlJobGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.XxlJobGroup, err error) {
	buf := make([]*model.XxlJobGroup, 0, batchSize)
	err = x.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (x xxlJobGroupDo) FindInBatches(result *[]*model.XxlJobGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return x.DO.FindInBatches(result, batchSize, fc)
}

func (x xxlJobGroupDo) Attrs(attrs ...field.AssignExpr) *xxlJobGroupDo {
	return x.withDO(x.DO.Attrs(attrs...))
}

func (x xxlJobGroupDo) Assign(attrs ...field.AssignExpr) *xxlJobGroupDo {
	return x.withDO(x.DO.Assign(attrs...))
}

func (x xxlJobGroupDo) Joins(fields ...field.RelationField) *xxlJobGroupDo {
	for _, _f := range fields {
		x = *x.withDO(x.DO.Joins(_f))
	}
	return &x
}

func (x xxlJobGroupDo) Preload(fields ...field.RelationField) *xxlJobGroupDo {
	for _, _f := range fields {
		x = *x.withDO(x.DO.Preload(_f))
	}
	return &x
}

func (x xxlJobGroupDo) FirstOrInit() (*model.XxlJobGroup, error) {
	if result, err := x.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.XxlJobGroup), nil
	}
}

func (x xxlJobGroupDo) FirstOrCreate() (*model.XxlJobGroup, error) {
	if result, err := x.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.XxlJobGroup), nil
	}
}

func (x xxlJobGroupDo) FindByPage(offset int, limit int) (result []*model.XxlJobGroup, count int64, err error) {
	result, err = x.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = x.Offset(-1).Limit(-1).Count()
	return
}

func (x xxlJobGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = x.Count()
	if err != nil {
		return
	}

	err = x.Offset(offset).Limit(limit).Scan(result)
	return
}

func (x xxlJobGroupDo) Scan(result interface{}) (err error) {
	return x.DO.Scan(result)
}

func (x xxlJobGroupDo) Delete(models ...*model.XxlJobGroup) (result gen.ResultInfo, err error) {
	return x.DO.Delete(models)
}

func (x *xxlJobGroupDo) withDO(do gen.Dao) *xxlJobGroupDo {
	x.DO = *do.(*gen.DO)
	return x
}
