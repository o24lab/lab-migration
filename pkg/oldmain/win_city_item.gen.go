// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package oldmain

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"migration/pkg/model"
)

func newWinCityItem(db *gorm.DB, opts ...gen.DOOption) winCityItem {
	_winCityItem := winCityItem{}

	_winCityItem.winCityItemDo.UseDB(db, opts...)
	_winCityItem.winCityItemDo.UseModel(&model.WinCityItem{})

	tableName := _winCityItem.winCityItemDo.TableName()
	_winCityItem.ALL = field.NewAsterisk(tableName)
	_winCityItem.ID = field.NewInt32(tableName, "id")
	_winCityItem.ProvinceCode = field.NewString(tableName, "province_code")
	_winCityItem.Nation = field.NewString(tableName, "nation")
	_winCityItem.ProvinceName = field.NewString(tableName, "province_name")
	_winCityItem.City = field.NewString(tableName, "city")
	_winCityItem.Remark = field.NewString(tableName, "remark")
	_winCityItem.Sort = field.NewInt32(tableName, "sort")
	_winCityItem.ReferID = field.NewInt32(tableName, "refer_id")
	_winCityItem.CreatedAt = field.NewInt32(tableName, "created_at")
	_winCityItem.UpdatedAt = field.NewInt32(tableName, "updated_at")

	_winCityItem.fillFieldMap()

	return _winCityItem
}

// winCityItem 省级城市字典表
type winCityItem struct {
	winCityItemDo

	ALL          field.Asterisk
	ID           field.Int32  // id
	ProvinceCode field.String // 省份字典码
	Nation       field.String // 国家
	ProvinceName field.String // 省份name
	City         field.String // 城市
	Remark       field.String // 备注
	Sort         field.Int32  // 排序:从高到低
	ReferID      field.Int32  // 预设字段
	CreatedAt    field.Int32  // 创建时间
	UpdatedAt    field.Int32  // 更新时间

	fieldMap map[string]field.Expr
}

func (w winCityItem) Table(newTableName string) *winCityItem {
	w.winCityItemDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winCityItem) As(alias string) *winCityItem {
	w.winCityItemDo.DO = *(w.winCityItemDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winCityItem) updateTableName(table string) *winCityItem {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt32(table, "id")
	w.ProvinceCode = field.NewString(table, "province_code")
	w.Nation = field.NewString(table, "nation")
	w.ProvinceName = field.NewString(table, "province_name")
	w.City = field.NewString(table, "city")
	w.Remark = field.NewString(table, "remark")
	w.Sort = field.NewInt32(table, "sort")
	w.ReferID = field.NewInt32(table, "refer_id")
	w.CreatedAt = field.NewInt32(table, "created_at")
	w.UpdatedAt = field.NewInt32(table, "updated_at")

	w.fillFieldMap()

	return w
}

func (w *winCityItem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winCityItem) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 10)
	w.fieldMap["id"] = w.ID
	w.fieldMap["province_code"] = w.ProvinceCode
	w.fieldMap["nation"] = w.Nation
	w.fieldMap["province_name"] = w.ProvinceName
	w.fieldMap["city"] = w.City
	w.fieldMap["remark"] = w.Remark
	w.fieldMap["sort"] = w.Sort
	w.fieldMap["refer_id"] = w.ReferID
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
}

func (w winCityItem) clone(db *gorm.DB) winCityItem {
	w.winCityItemDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winCityItem) replaceDB(db *gorm.DB) winCityItem {
	w.winCityItemDo.ReplaceDB(db)
	return w
}

type winCityItemDo struct{ gen.DO }

func (w winCityItemDo) Debug() *winCityItemDo {
	return w.withDO(w.DO.Debug())
}

func (w winCityItemDo) WithContext(ctx context.Context) *winCityItemDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winCityItemDo) ReadDB() *winCityItemDo {
	return w.Clauses(dbresolver.Read)
}

func (w winCityItemDo) WriteDB() *winCityItemDo {
	return w.Clauses(dbresolver.Write)
}

func (w winCityItemDo) Session(config *gorm.Session) *winCityItemDo {
	return w.withDO(w.DO.Session(config))
}

func (w winCityItemDo) Clauses(conds ...clause.Expression) *winCityItemDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winCityItemDo) Returning(value interface{}, columns ...string) *winCityItemDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winCityItemDo) Not(conds ...gen.Condition) *winCityItemDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winCityItemDo) Or(conds ...gen.Condition) *winCityItemDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winCityItemDo) Select(conds ...field.Expr) *winCityItemDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winCityItemDo) Where(conds ...gen.Condition) *winCityItemDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winCityItemDo) Order(conds ...field.Expr) *winCityItemDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winCityItemDo) Distinct(cols ...field.Expr) *winCityItemDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winCityItemDo) Omit(cols ...field.Expr) *winCityItemDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winCityItemDo) Join(table schema.Tabler, on ...field.Expr) *winCityItemDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winCityItemDo) LeftJoin(table schema.Tabler, on ...field.Expr) *winCityItemDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winCityItemDo) RightJoin(table schema.Tabler, on ...field.Expr) *winCityItemDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winCityItemDo) Group(cols ...field.Expr) *winCityItemDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winCityItemDo) Having(conds ...gen.Condition) *winCityItemDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winCityItemDo) Limit(limit int) *winCityItemDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winCityItemDo) Offset(offset int) *winCityItemDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winCityItemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *winCityItemDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winCityItemDo) Unscoped() *winCityItemDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winCityItemDo) Create(values ...*model.WinCityItem) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winCityItemDo) CreateInBatches(values []*model.WinCityItem, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winCityItemDo) Save(values ...*model.WinCityItem) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winCityItemDo) First() (*model.WinCityItem, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCityItem), nil
	}
}

func (w winCityItemDo) Take() (*model.WinCityItem, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCityItem), nil
	}
}

func (w winCityItemDo) Last() (*model.WinCityItem, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCityItem), nil
	}
}

func (w winCityItemDo) Find() ([]*model.WinCityItem, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinCityItem), err
}

func (w winCityItemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinCityItem, err error) {
	buf := make([]*model.WinCityItem, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winCityItemDo) FindInBatches(result *[]*model.WinCityItem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winCityItemDo) Attrs(attrs ...field.AssignExpr) *winCityItemDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winCityItemDo) Assign(attrs ...field.AssignExpr) *winCityItemDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winCityItemDo) Joins(fields ...field.RelationField) *winCityItemDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winCityItemDo) Preload(fields ...field.RelationField) *winCityItemDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winCityItemDo) FirstOrInit() (*model.WinCityItem, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCityItem), nil
	}
}

func (w winCityItemDo) FirstOrCreate() (*model.WinCityItem, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCityItem), nil
	}
}

func (w winCityItemDo) FindByPage(offset int, limit int) (result []*model.WinCityItem, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winCityItemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winCityItemDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winCityItemDo) Delete(models ...*model.WinCityItem) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winCityItemDo) withDO(do gen.Dao) *winCityItemDo {
	w.DO = *do.(*gen.DO)
	return w
}
