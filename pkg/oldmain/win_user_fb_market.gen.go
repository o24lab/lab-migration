// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package oldmain

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"migration/pkg/model"
)

func newWinUserFbMarket(db *gorm.DB, opts ...gen.DOOption) winUserFbMarket {
	_winUserFbMarket := winUserFbMarket{}

	_winUserFbMarket.winUserFbMarketDo.UseDB(db, opts...)
	_winUserFbMarket.winUserFbMarketDo.UseModel(&model.WinUserFbMarket{})

	tableName := _winUserFbMarket.winUserFbMarketDo.TableName()
	_winUserFbMarket.ALL = field.NewAsterisk(tableName)
	_winUserFbMarket.ID = field.NewInt64(tableName, "id")
	_winUserFbMarket.UID = field.NewInt32(tableName, "uid")
	_winUserFbMarket.Amount = field.NewFloat64(tableName, "amount")
	_winUserFbMarket.KycFlag = field.NewInt32(tableName, "kyc_flag")
	_winUserFbMarket.Remark = field.NewString(tableName, "remark")
	_winUserFbMarket.CreatedAt = field.NewInt32(tableName, "created_at")
	_winUserFbMarket.UpdatedAt = field.NewInt32(tableName, "updated_at")
	_winUserFbMarket.UpdatedUser = field.NewString(tableName, "updated_user")

	_winUserFbMarket.fillFieldMap()

	return _winUserFbMarket
}

// winUserFbMarket FB营销表
type winUserFbMarket struct {
	winUserFbMarketDo

	ALL         field.Asterisk
	ID          field.Int64   // 自增主键
	UID         field.Int32   // UID
	Amount      field.Float64 // 赠送金额
	KycFlag     field.Int32   // 是否需要完成kyc:0-否，1-是
	Remark      field.String  // 备注
	CreatedAt   field.Int32   // 赠送时间
	UpdatedAt   field.Int32   // 修改时间
	UpdatedUser field.String  // 最后修改人

	fieldMap map[string]field.Expr
}

func (w winUserFbMarket) Table(newTableName string) *winUserFbMarket {
	w.winUserFbMarketDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winUserFbMarket) As(alias string) *winUserFbMarket {
	w.winUserFbMarketDo.DO = *(w.winUserFbMarketDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winUserFbMarket) updateTableName(table string) *winUserFbMarket {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.UID = field.NewInt32(table, "uid")
	w.Amount = field.NewFloat64(table, "amount")
	w.KycFlag = field.NewInt32(table, "kyc_flag")
	w.Remark = field.NewString(table, "remark")
	w.CreatedAt = field.NewInt32(table, "created_at")
	w.UpdatedAt = field.NewInt32(table, "updated_at")
	w.UpdatedUser = field.NewString(table, "updated_user")

	w.fillFieldMap()

	return w
}

func (w *winUserFbMarket) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winUserFbMarket) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 8)
	w.fieldMap["id"] = w.ID
	w.fieldMap["uid"] = w.UID
	w.fieldMap["amount"] = w.Amount
	w.fieldMap["kyc_flag"] = w.KycFlag
	w.fieldMap["remark"] = w.Remark
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["updated_user"] = w.UpdatedUser
}

func (w winUserFbMarket) clone(db *gorm.DB) winUserFbMarket {
	w.winUserFbMarketDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winUserFbMarket) replaceDB(db *gorm.DB) winUserFbMarket {
	w.winUserFbMarketDo.ReplaceDB(db)
	return w
}

type winUserFbMarketDo struct{ gen.DO }

func (w winUserFbMarketDo) Debug() *winUserFbMarketDo {
	return w.withDO(w.DO.Debug())
}

func (w winUserFbMarketDo) WithContext(ctx context.Context) *winUserFbMarketDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winUserFbMarketDo) ReadDB() *winUserFbMarketDo {
	return w.Clauses(dbresolver.Read)
}

func (w winUserFbMarketDo) WriteDB() *winUserFbMarketDo {
	return w.Clauses(dbresolver.Write)
}

func (w winUserFbMarketDo) Session(config *gorm.Session) *winUserFbMarketDo {
	return w.withDO(w.DO.Session(config))
}

func (w winUserFbMarketDo) Clauses(conds ...clause.Expression) *winUserFbMarketDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winUserFbMarketDo) Returning(value interface{}, columns ...string) *winUserFbMarketDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winUserFbMarketDo) Not(conds ...gen.Condition) *winUserFbMarketDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winUserFbMarketDo) Or(conds ...gen.Condition) *winUserFbMarketDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winUserFbMarketDo) Select(conds ...field.Expr) *winUserFbMarketDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winUserFbMarketDo) Where(conds ...gen.Condition) *winUserFbMarketDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winUserFbMarketDo) Order(conds ...field.Expr) *winUserFbMarketDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winUserFbMarketDo) Distinct(cols ...field.Expr) *winUserFbMarketDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winUserFbMarketDo) Omit(cols ...field.Expr) *winUserFbMarketDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winUserFbMarketDo) Join(table schema.Tabler, on ...field.Expr) *winUserFbMarketDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winUserFbMarketDo) LeftJoin(table schema.Tabler, on ...field.Expr) *winUserFbMarketDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winUserFbMarketDo) RightJoin(table schema.Tabler, on ...field.Expr) *winUserFbMarketDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winUserFbMarketDo) Group(cols ...field.Expr) *winUserFbMarketDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winUserFbMarketDo) Having(conds ...gen.Condition) *winUserFbMarketDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winUserFbMarketDo) Limit(limit int) *winUserFbMarketDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winUserFbMarketDo) Offset(offset int) *winUserFbMarketDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winUserFbMarketDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *winUserFbMarketDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winUserFbMarketDo) Unscoped() *winUserFbMarketDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winUserFbMarketDo) Create(values ...*model.WinUserFbMarket) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winUserFbMarketDo) CreateInBatches(values []*model.WinUserFbMarket, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winUserFbMarketDo) Save(values ...*model.WinUserFbMarket) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winUserFbMarketDo) First() (*model.WinUserFbMarket, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserFbMarket), nil
	}
}

func (w winUserFbMarketDo) Take() (*model.WinUserFbMarket, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserFbMarket), nil
	}
}

func (w winUserFbMarketDo) Last() (*model.WinUserFbMarket, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserFbMarket), nil
	}
}

func (w winUserFbMarketDo) Find() ([]*model.WinUserFbMarket, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinUserFbMarket), err
}

func (w winUserFbMarketDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinUserFbMarket, err error) {
	buf := make([]*model.WinUserFbMarket, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winUserFbMarketDo) FindInBatches(result *[]*model.WinUserFbMarket, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winUserFbMarketDo) Attrs(attrs ...field.AssignExpr) *winUserFbMarketDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winUserFbMarketDo) Assign(attrs ...field.AssignExpr) *winUserFbMarketDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winUserFbMarketDo) Joins(fields ...field.RelationField) *winUserFbMarketDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winUserFbMarketDo) Preload(fields ...field.RelationField) *winUserFbMarketDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winUserFbMarketDo) FirstOrInit() (*model.WinUserFbMarket, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserFbMarket), nil
	}
}

func (w winUserFbMarketDo) FirstOrCreate() (*model.WinUserFbMarket, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserFbMarket), nil
	}
}

func (w winUserFbMarketDo) FindByPage(offset int, limit int) (result []*model.WinUserFbMarket, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winUserFbMarketDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winUserFbMarketDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winUserFbMarketDo) Delete(models ...*model.WinUserFbMarket) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winUserFbMarketDo) withDO(do gen.Dao) *winUserFbMarketDo {
	w.DO = *do.(*gen.DO)
	return w
}
