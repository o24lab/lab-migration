// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package oldmain

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"migration/pkg/model"
)

func newWinCoinRate(db *gorm.DB, opts ...gen.DOOption) winCoinRate {
	_winCoinRate := winCoinRate{}

	_winCoinRate.winCoinRateDo.UseDB(db, opts...)
	_winCoinRate.winCoinRateDo.UseModel(&model.WinCoinRate{})

	tableName := _winCoinRate.winCoinRateDo.TableName()
	_winCoinRate.ALL = field.NewAsterisk(tableName)
	_winCoinRate.ID = field.NewInt32(tableName, "id")
	_winCoinRate.OriginalCurrency = field.NewString(tableName, "original_currency")
	_winCoinRate.TransferCurrency = field.NewString(tableName, "transfer_currency")
	_winCoinRate.Rate = field.NewFloat64(tableName, "rate")
	_winCoinRate.Status = field.NewInt32(tableName, "status")
	_winCoinRate.CreatedAt = field.NewInt32(tableName, "created_at")
	_winCoinRate.UpdatedAt = field.NewInt32(tableName, "updated_at")
	_winCoinRate.OperatorName = field.NewString(tableName, "operator_name")

	_winCoinRate.fillFieldMap()

	return _winCoinRate
}

// winCoinRate 汇率表
type winCoinRate struct {
	winCoinRateDo

	ALL              field.Asterisk
	ID               field.Int32   // ID
	OriginalCurrency field.String  // 原始币种
	TransferCurrency field.String  // 转换币种
	Rate             field.Float64 // 汇率
	Status           field.Int32   // 状态：0-关闭；1-开启
	CreatedAt        field.Int32   // 创建时间
	UpdatedAt        field.Int32   // 修改时间
	OperatorName     field.String  // 操作人姓名

	fieldMap map[string]field.Expr
}

func (w winCoinRate) Table(newTableName string) *winCoinRate {
	w.winCoinRateDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winCoinRate) As(alias string) *winCoinRate {
	w.winCoinRateDo.DO = *(w.winCoinRateDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winCoinRate) updateTableName(table string) *winCoinRate {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt32(table, "id")
	w.OriginalCurrency = field.NewString(table, "original_currency")
	w.TransferCurrency = field.NewString(table, "transfer_currency")
	w.Rate = field.NewFloat64(table, "rate")
	w.Status = field.NewInt32(table, "status")
	w.CreatedAt = field.NewInt32(table, "created_at")
	w.UpdatedAt = field.NewInt32(table, "updated_at")
	w.OperatorName = field.NewString(table, "operator_name")

	w.fillFieldMap()

	return w
}

func (w *winCoinRate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winCoinRate) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 8)
	w.fieldMap["id"] = w.ID
	w.fieldMap["original_currency"] = w.OriginalCurrency
	w.fieldMap["transfer_currency"] = w.TransferCurrency
	w.fieldMap["rate"] = w.Rate
	w.fieldMap["status"] = w.Status
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["operator_name"] = w.OperatorName
}

func (w winCoinRate) clone(db *gorm.DB) winCoinRate {
	w.winCoinRateDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winCoinRate) replaceDB(db *gorm.DB) winCoinRate {
	w.winCoinRateDo.ReplaceDB(db)
	return w
}

type winCoinRateDo struct{ gen.DO }

func (w winCoinRateDo) Debug() *winCoinRateDo {
	return w.withDO(w.DO.Debug())
}

func (w winCoinRateDo) WithContext(ctx context.Context) *winCoinRateDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winCoinRateDo) ReadDB() *winCoinRateDo {
	return w.Clauses(dbresolver.Read)
}

func (w winCoinRateDo) WriteDB() *winCoinRateDo {
	return w.Clauses(dbresolver.Write)
}

func (w winCoinRateDo) Session(config *gorm.Session) *winCoinRateDo {
	return w.withDO(w.DO.Session(config))
}

func (w winCoinRateDo) Clauses(conds ...clause.Expression) *winCoinRateDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winCoinRateDo) Returning(value interface{}, columns ...string) *winCoinRateDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winCoinRateDo) Not(conds ...gen.Condition) *winCoinRateDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winCoinRateDo) Or(conds ...gen.Condition) *winCoinRateDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winCoinRateDo) Select(conds ...field.Expr) *winCoinRateDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winCoinRateDo) Where(conds ...gen.Condition) *winCoinRateDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winCoinRateDo) Order(conds ...field.Expr) *winCoinRateDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winCoinRateDo) Distinct(cols ...field.Expr) *winCoinRateDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winCoinRateDo) Omit(cols ...field.Expr) *winCoinRateDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winCoinRateDo) Join(table schema.Tabler, on ...field.Expr) *winCoinRateDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winCoinRateDo) LeftJoin(table schema.Tabler, on ...field.Expr) *winCoinRateDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winCoinRateDo) RightJoin(table schema.Tabler, on ...field.Expr) *winCoinRateDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winCoinRateDo) Group(cols ...field.Expr) *winCoinRateDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winCoinRateDo) Having(conds ...gen.Condition) *winCoinRateDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winCoinRateDo) Limit(limit int) *winCoinRateDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winCoinRateDo) Offset(offset int) *winCoinRateDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winCoinRateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *winCoinRateDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winCoinRateDo) Unscoped() *winCoinRateDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winCoinRateDo) Create(values ...*model.WinCoinRate) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winCoinRateDo) CreateInBatches(values []*model.WinCoinRate, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winCoinRateDo) Save(values ...*model.WinCoinRate) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winCoinRateDo) First() (*model.WinCoinRate, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinRate), nil
	}
}

func (w winCoinRateDo) Take() (*model.WinCoinRate, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinRate), nil
	}
}

func (w winCoinRateDo) Last() (*model.WinCoinRate, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinRate), nil
	}
}

func (w winCoinRateDo) Find() ([]*model.WinCoinRate, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinCoinRate), err
}

func (w winCoinRateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinCoinRate, err error) {
	buf := make([]*model.WinCoinRate, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winCoinRateDo) FindInBatches(result *[]*model.WinCoinRate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winCoinRateDo) Attrs(attrs ...field.AssignExpr) *winCoinRateDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winCoinRateDo) Assign(attrs ...field.AssignExpr) *winCoinRateDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winCoinRateDo) Joins(fields ...field.RelationField) *winCoinRateDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winCoinRateDo) Preload(fields ...field.RelationField) *winCoinRateDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winCoinRateDo) FirstOrInit() (*model.WinCoinRate, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinRate), nil
	}
}

func (w winCoinRateDo) FirstOrCreate() (*model.WinCoinRate, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinRate), nil
	}
}

func (w winCoinRateDo) FindByPage(offset int, limit int) (result []*model.WinCoinRate, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winCoinRateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winCoinRateDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winCoinRateDo) Delete(models ...*model.WinCoinRate) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winCoinRateDo) withDO(do gen.Dao) *winCoinRateDo {
	w.DO = *do.(*gen.DO)
	return w
}
