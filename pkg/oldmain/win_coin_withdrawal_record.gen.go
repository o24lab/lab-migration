// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package oldmain

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"migration/pkg/model"
)

func newWinCoinWithdrawalRecord(db *gorm.DB, opts ...gen.DOOption) winCoinWithdrawalRecord {
	_winCoinWithdrawalRecord := winCoinWithdrawalRecord{}

	_winCoinWithdrawalRecord.winCoinWithdrawalRecordDo.UseDB(db, opts...)
	_winCoinWithdrawalRecord.winCoinWithdrawalRecordDo.UseModel(&model.WinCoinWithdrawalRecord{})

	tableName := _winCoinWithdrawalRecord.winCoinWithdrawalRecordDo.TableName()
	_winCoinWithdrawalRecord.ALL = field.NewAsterisk(tableName)
	_winCoinWithdrawalRecord.ID = field.NewInt64(tableName, "id")
	_winCoinWithdrawalRecord.OrderID = field.NewString(tableName, "order_id")
	_winCoinWithdrawalRecord.PlatOrderID = field.NewString(tableName, "plat_order_id")
	_winCoinWithdrawalRecord.UID = field.NewInt32(tableName, "uid")
	_winCoinWithdrawalRecord.Username = field.NewString(tableName, "username")
	_winCoinWithdrawalRecord.MerchantID = field.NewInt32(tableName, "merchant_id")
	_winCoinWithdrawalRecord.Code = field.NewString(tableName, "code")
	_winCoinWithdrawalRecord.PlatName = field.NewString(tableName, "plat_name")
	_winCoinWithdrawalRecord.PlatNickName = field.NewString(tableName, "plat_nick_name")
	_winCoinWithdrawalRecord.WithdrawalAddress = field.NewString(tableName, "withdrawal_address")
	_winCoinWithdrawalRecord.WithdrawalAmount = field.NewFloat64(tableName, "withdrawal_amount")
	_winCoinWithdrawalRecord.ExchangeRate = field.NewFloat64(tableName, "exchange_rate")
	_winCoinWithdrawalRecord.RealAmount = field.NewFloat64(tableName, "real_amount")
	_winCoinWithdrawalRecord.CoinBefore = field.NewFloat64(tableName, "coin_before")
	_winCoinWithdrawalRecord.MainNetFees = field.NewFloat64(tableName, "main_net_fees")
	_winCoinWithdrawalRecord.Currency = field.NewString(tableName, "currency")
	_winCoinWithdrawalRecord.CategoryCurrency = field.NewInt32(tableName, "category_currency")
	_winCoinWithdrawalRecord.CategoryTransfer = field.NewInt32(tableName, "category_transfer")
	_winCoinWithdrawalRecord.Status = field.NewInt32(tableName, "status")
	_winCoinWithdrawalRecord.AuditType = field.NewInt32(tableName, "audit_type")
	_winCoinWithdrawalRecord.AdminUsername = field.NewString(tableName, "admin_username")
	_winCoinWithdrawalRecord.Mark = field.NewString(tableName, "mark")
	_winCoinWithdrawalRecord.WithdrawalAdminUsername = field.NewString(tableName, "withdrawal_admin_username")
	_winCoinWithdrawalRecord.CustomizeNoticeID = field.NewInt64(tableName, "customize_notice_Id")
	_winCoinWithdrawalRecord.ExtraInfo = field.NewString(tableName, "extra_info")
	_winCoinWithdrawalRecord.CreatedAt = field.NewInt32(tableName, "created_at")
	_winCoinWithdrawalRecord.UpdatedAt = field.NewInt32(tableName, "updated_at")
	_winCoinWithdrawalRecord.FinanceOperatorAt = field.NewInt32(tableName, "finance_operator_at")

	_winCoinWithdrawalRecord.fillFieldMap()

	return _winCoinWithdrawalRecord
}

// winCoinWithdrawalRecord 提款记录表
type winCoinWithdrawalRecord struct {
	winCoinWithdrawalRecordDo

	ALL                     field.Asterisk
	ID                      field.Int64
	OrderID                 field.String  // 订单号(三方平台用)
	PlatOrderID             field.String  // 三方平台订单号
	UID                     field.Int32   // UID
	Username                field.String  // 用户名
	MerchantID              field.Int32   // 商户id
	Code                    field.String  // 支付通道编码
	PlatName                field.String  // 平台名称
	PlatNickName            field.String  // 平台自定义名称
	WithdrawalAddress       field.String  // 加密地址
	WithdrawalAmount        field.Float64 // 提款金额
	ExchangeRate            field.Float64 // 汇率
	RealAmount              field.Float64 // 到账金额
	CoinBefore              field.Float64 // 提款前用户金额
	MainNetFees             field.Float64 // 主网费
	Currency                field.String  // 币种
	CategoryCurrency        field.Int32   // 货币类型:0-数字货币 1-法币
	CategoryTransfer        field.Int32   // 转账类型:1-TRC-20 2-ERC-20 3-BANK 4-PIX 5-GCASH
	Status                  field.Int32   // 状态: 0-申请中，1-提款成功，2-提款失败，3-稽核成功 4-代付种
	AuditType               field.Int32   // 审核类型 0人工，1自动
	AdminUsername           field.String  // 操作人
	Mark                    field.String  // 审核备注
	WithdrawalAdminUsername field.String  // 提现操作人
	CustomizeNoticeID       field.Int64   // 自定义通知客户信息Id
	ExtraInfo               field.String  // 额外信息
	CreatedAt               field.Int32
	UpdatedAt               field.Int32
	FinanceOperatorAt       field.Int32 // 财务操作时间

	fieldMap map[string]field.Expr
}

func (w winCoinWithdrawalRecord) Table(newTableName string) *winCoinWithdrawalRecord {
	w.winCoinWithdrawalRecordDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winCoinWithdrawalRecord) As(alias string) *winCoinWithdrawalRecord {
	w.winCoinWithdrawalRecordDo.DO = *(w.winCoinWithdrawalRecordDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winCoinWithdrawalRecord) updateTableName(table string) *winCoinWithdrawalRecord {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.OrderID = field.NewString(table, "order_id")
	w.PlatOrderID = field.NewString(table, "plat_order_id")
	w.UID = field.NewInt32(table, "uid")
	w.Username = field.NewString(table, "username")
	w.MerchantID = field.NewInt32(table, "merchant_id")
	w.Code = field.NewString(table, "code")
	w.PlatName = field.NewString(table, "plat_name")
	w.PlatNickName = field.NewString(table, "plat_nick_name")
	w.WithdrawalAddress = field.NewString(table, "withdrawal_address")
	w.WithdrawalAmount = field.NewFloat64(table, "withdrawal_amount")
	w.ExchangeRate = field.NewFloat64(table, "exchange_rate")
	w.RealAmount = field.NewFloat64(table, "real_amount")
	w.CoinBefore = field.NewFloat64(table, "coin_before")
	w.MainNetFees = field.NewFloat64(table, "main_net_fees")
	w.Currency = field.NewString(table, "currency")
	w.CategoryCurrency = field.NewInt32(table, "category_currency")
	w.CategoryTransfer = field.NewInt32(table, "category_transfer")
	w.Status = field.NewInt32(table, "status")
	w.AuditType = field.NewInt32(table, "audit_type")
	w.AdminUsername = field.NewString(table, "admin_username")
	w.Mark = field.NewString(table, "mark")
	w.WithdrawalAdminUsername = field.NewString(table, "withdrawal_admin_username")
	w.CustomizeNoticeID = field.NewInt64(table, "customize_notice_Id")
	w.ExtraInfo = field.NewString(table, "extra_info")
	w.CreatedAt = field.NewInt32(table, "created_at")
	w.UpdatedAt = field.NewInt32(table, "updated_at")
	w.FinanceOperatorAt = field.NewInt32(table, "finance_operator_at")

	w.fillFieldMap()

	return w
}

func (w *winCoinWithdrawalRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winCoinWithdrawalRecord) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 28)
	w.fieldMap["id"] = w.ID
	w.fieldMap["order_id"] = w.OrderID
	w.fieldMap["plat_order_id"] = w.PlatOrderID
	w.fieldMap["uid"] = w.UID
	w.fieldMap["username"] = w.Username
	w.fieldMap["merchant_id"] = w.MerchantID
	w.fieldMap["code"] = w.Code
	w.fieldMap["plat_name"] = w.PlatName
	w.fieldMap["plat_nick_name"] = w.PlatNickName
	w.fieldMap["withdrawal_address"] = w.WithdrawalAddress
	w.fieldMap["withdrawal_amount"] = w.WithdrawalAmount
	w.fieldMap["exchange_rate"] = w.ExchangeRate
	w.fieldMap["real_amount"] = w.RealAmount
	w.fieldMap["coin_before"] = w.CoinBefore
	w.fieldMap["main_net_fees"] = w.MainNetFees
	w.fieldMap["currency"] = w.Currency
	w.fieldMap["category_currency"] = w.CategoryCurrency
	w.fieldMap["category_transfer"] = w.CategoryTransfer
	w.fieldMap["status"] = w.Status
	w.fieldMap["audit_type"] = w.AuditType
	w.fieldMap["admin_username"] = w.AdminUsername
	w.fieldMap["mark"] = w.Mark
	w.fieldMap["withdrawal_admin_username"] = w.WithdrawalAdminUsername
	w.fieldMap["customize_notice_Id"] = w.CustomizeNoticeID
	w.fieldMap["extra_info"] = w.ExtraInfo
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["finance_operator_at"] = w.FinanceOperatorAt
}

func (w winCoinWithdrawalRecord) clone(db *gorm.DB) winCoinWithdrawalRecord {
	w.winCoinWithdrawalRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winCoinWithdrawalRecord) replaceDB(db *gorm.DB) winCoinWithdrawalRecord {
	w.winCoinWithdrawalRecordDo.ReplaceDB(db)
	return w
}

type winCoinWithdrawalRecordDo struct{ gen.DO }

func (w winCoinWithdrawalRecordDo) Debug() *winCoinWithdrawalRecordDo {
	return w.withDO(w.DO.Debug())
}

func (w winCoinWithdrawalRecordDo) WithContext(ctx context.Context) *winCoinWithdrawalRecordDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winCoinWithdrawalRecordDo) ReadDB() *winCoinWithdrawalRecordDo {
	return w.Clauses(dbresolver.Read)
}

func (w winCoinWithdrawalRecordDo) WriteDB() *winCoinWithdrawalRecordDo {
	return w.Clauses(dbresolver.Write)
}

func (w winCoinWithdrawalRecordDo) Session(config *gorm.Session) *winCoinWithdrawalRecordDo {
	return w.withDO(w.DO.Session(config))
}

func (w winCoinWithdrawalRecordDo) Clauses(conds ...clause.Expression) *winCoinWithdrawalRecordDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winCoinWithdrawalRecordDo) Returning(value interface{}, columns ...string) *winCoinWithdrawalRecordDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winCoinWithdrawalRecordDo) Not(conds ...gen.Condition) *winCoinWithdrawalRecordDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winCoinWithdrawalRecordDo) Or(conds ...gen.Condition) *winCoinWithdrawalRecordDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winCoinWithdrawalRecordDo) Select(conds ...field.Expr) *winCoinWithdrawalRecordDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winCoinWithdrawalRecordDo) Where(conds ...gen.Condition) *winCoinWithdrawalRecordDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winCoinWithdrawalRecordDo) Order(conds ...field.Expr) *winCoinWithdrawalRecordDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winCoinWithdrawalRecordDo) Distinct(cols ...field.Expr) *winCoinWithdrawalRecordDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winCoinWithdrawalRecordDo) Omit(cols ...field.Expr) *winCoinWithdrawalRecordDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winCoinWithdrawalRecordDo) Join(table schema.Tabler, on ...field.Expr) *winCoinWithdrawalRecordDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winCoinWithdrawalRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) *winCoinWithdrawalRecordDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winCoinWithdrawalRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) *winCoinWithdrawalRecordDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winCoinWithdrawalRecordDo) Group(cols ...field.Expr) *winCoinWithdrawalRecordDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winCoinWithdrawalRecordDo) Having(conds ...gen.Condition) *winCoinWithdrawalRecordDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winCoinWithdrawalRecordDo) Limit(limit int) *winCoinWithdrawalRecordDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winCoinWithdrawalRecordDo) Offset(offset int) *winCoinWithdrawalRecordDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winCoinWithdrawalRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *winCoinWithdrawalRecordDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winCoinWithdrawalRecordDo) Unscoped() *winCoinWithdrawalRecordDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winCoinWithdrawalRecordDo) Create(values ...*model.WinCoinWithdrawalRecord) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winCoinWithdrawalRecordDo) CreateInBatches(values []*model.WinCoinWithdrawalRecord, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winCoinWithdrawalRecordDo) Save(values ...*model.WinCoinWithdrawalRecord) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winCoinWithdrawalRecordDo) First() (*model.WinCoinWithdrawalRecord, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinWithdrawalRecord), nil
	}
}

func (w winCoinWithdrawalRecordDo) Take() (*model.WinCoinWithdrawalRecord, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinWithdrawalRecord), nil
	}
}

func (w winCoinWithdrawalRecordDo) Last() (*model.WinCoinWithdrawalRecord, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinWithdrawalRecord), nil
	}
}

func (w winCoinWithdrawalRecordDo) Find() ([]*model.WinCoinWithdrawalRecord, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinCoinWithdrawalRecord), err
}

func (w winCoinWithdrawalRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinCoinWithdrawalRecord, err error) {
	buf := make([]*model.WinCoinWithdrawalRecord, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winCoinWithdrawalRecordDo) FindInBatches(result *[]*model.WinCoinWithdrawalRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winCoinWithdrawalRecordDo) Attrs(attrs ...field.AssignExpr) *winCoinWithdrawalRecordDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winCoinWithdrawalRecordDo) Assign(attrs ...field.AssignExpr) *winCoinWithdrawalRecordDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winCoinWithdrawalRecordDo) Joins(fields ...field.RelationField) *winCoinWithdrawalRecordDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winCoinWithdrawalRecordDo) Preload(fields ...field.RelationField) *winCoinWithdrawalRecordDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winCoinWithdrawalRecordDo) FirstOrInit() (*model.WinCoinWithdrawalRecord, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinWithdrawalRecord), nil
	}
}

func (w winCoinWithdrawalRecordDo) FirstOrCreate() (*model.WinCoinWithdrawalRecord, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinWithdrawalRecord), nil
	}
}

func (w winCoinWithdrawalRecordDo) FindByPage(offset int, limit int) (result []*model.WinCoinWithdrawalRecord, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winCoinWithdrawalRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winCoinWithdrawalRecordDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winCoinWithdrawalRecordDo) Delete(models ...*model.WinCoinWithdrawalRecord) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winCoinWithdrawalRecordDo) withDO(do gen.Dao) *winCoinWithdrawalRecordDo {
	w.DO = *do.(*gen.DO)
	return w
}
