// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package oldmain

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"migration/pkg/model"
)

func newWinHelpType(db *gorm.DB, opts ...gen.DOOption) winHelpType {
	_winHelpType := winHelpType{}

	_winHelpType.winHelpTypeDo.UseDB(db, opts...)
	_winHelpType.winHelpTypeDo.UseModel(&model.WinHelpType{})

	tableName := _winHelpType.winHelpTypeDo.TableName()
	_winHelpType.ALL = field.NewAsterisk(tableName)
	_winHelpType.ID = field.NewInt32(tableName, "id")
	_winHelpType.Language = field.NewString(tableName, "language")
	_winHelpType.TypeName = field.NewString(tableName, "type_name")
	_winHelpType.ImageURL = field.NewString(tableName, "image_url")
	_winHelpType.Sort = field.NewInt32(tableName, "sort")
	_winHelpType.Status = field.NewInt32(tableName, "status")
	_winHelpType.CreateBy = field.NewString(tableName, "create_by")
	_winHelpType.UpdateBy = field.NewString(tableName, "update_by")
	_winHelpType.CreatedAt = field.NewInt32(tableName, "created_at")
	_winHelpType.UpdatedAt = field.NewInt32(tableName, "updated_at")

	_winHelpType.fillFieldMap()

	return _winHelpType
}

// winHelpType 帮助类型
type winHelpType struct {
	winHelpTypeDo

	ALL       field.Asterisk
	ID        field.Int32  // 主键编号
	Language  field.String // 语言
	TypeName  field.String // 类型名称
	ImageURL  field.String // 图片地址
	Sort      field.Int32  // 排序
	Status    field.Int32  // 状态:1-启用 0-停用
	CreateBy  field.String // 创建者
	UpdateBy  field.String // 更新人
	CreatedAt field.Int32
	UpdatedAt field.Int32

	fieldMap map[string]field.Expr
}

func (w winHelpType) Table(newTableName string) *winHelpType {
	w.winHelpTypeDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winHelpType) As(alias string) *winHelpType {
	w.winHelpTypeDo.DO = *(w.winHelpTypeDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winHelpType) updateTableName(table string) *winHelpType {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt32(table, "id")
	w.Language = field.NewString(table, "language")
	w.TypeName = field.NewString(table, "type_name")
	w.ImageURL = field.NewString(table, "image_url")
	w.Sort = field.NewInt32(table, "sort")
	w.Status = field.NewInt32(table, "status")
	w.CreateBy = field.NewString(table, "create_by")
	w.UpdateBy = field.NewString(table, "update_by")
	w.CreatedAt = field.NewInt32(table, "created_at")
	w.UpdatedAt = field.NewInt32(table, "updated_at")

	w.fillFieldMap()

	return w
}

func (w *winHelpType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winHelpType) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 10)
	w.fieldMap["id"] = w.ID
	w.fieldMap["language"] = w.Language
	w.fieldMap["type_name"] = w.TypeName
	w.fieldMap["image_url"] = w.ImageURL
	w.fieldMap["sort"] = w.Sort
	w.fieldMap["status"] = w.Status
	w.fieldMap["create_by"] = w.CreateBy
	w.fieldMap["update_by"] = w.UpdateBy
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
}

func (w winHelpType) clone(db *gorm.DB) winHelpType {
	w.winHelpTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winHelpType) replaceDB(db *gorm.DB) winHelpType {
	w.winHelpTypeDo.ReplaceDB(db)
	return w
}

type winHelpTypeDo struct{ gen.DO }

func (w winHelpTypeDo) Debug() *winHelpTypeDo {
	return w.withDO(w.DO.Debug())
}

func (w winHelpTypeDo) WithContext(ctx context.Context) *winHelpTypeDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winHelpTypeDo) ReadDB() *winHelpTypeDo {
	return w.Clauses(dbresolver.Read)
}

func (w winHelpTypeDo) WriteDB() *winHelpTypeDo {
	return w.Clauses(dbresolver.Write)
}

func (w winHelpTypeDo) Session(config *gorm.Session) *winHelpTypeDo {
	return w.withDO(w.DO.Session(config))
}

func (w winHelpTypeDo) Clauses(conds ...clause.Expression) *winHelpTypeDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winHelpTypeDo) Returning(value interface{}, columns ...string) *winHelpTypeDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winHelpTypeDo) Not(conds ...gen.Condition) *winHelpTypeDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winHelpTypeDo) Or(conds ...gen.Condition) *winHelpTypeDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winHelpTypeDo) Select(conds ...field.Expr) *winHelpTypeDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winHelpTypeDo) Where(conds ...gen.Condition) *winHelpTypeDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winHelpTypeDo) Order(conds ...field.Expr) *winHelpTypeDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winHelpTypeDo) Distinct(cols ...field.Expr) *winHelpTypeDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winHelpTypeDo) Omit(cols ...field.Expr) *winHelpTypeDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winHelpTypeDo) Join(table schema.Tabler, on ...field.Expr) *winHelpTypeDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winHelpTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *winHelpTypeDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winHelpTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) *winHelpTypeDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winHelpTypeDo) Group(cols ...field.Expr) *winHelpTypeDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winHelpTypeDo) Having(conds ...gen.Condition) *winHelpTypeDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winHelpTypeDo) Limit(limit int) *winHelpTypeDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winHelpTypeDo) Offset(offset int) *winHelpTypeDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winHelpTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *winHelpTypeDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winHelpTypeDo) Unscoped() *winHelpTypeDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winHelpTypeDo) Create(values ...*model.WinHelpType) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winHelpTypeDo) CreateInBatches(values []*model.WinHelpType, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winHelpTypeDo) Save(values ...*model.WinHelpType) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winHelpTypeDo) First() (*model.WinHelpType, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinHelpType), nil
	}
}

func (w winHelpTypeDo) Take() (*model.WinHelpType, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinHelpType), nil
	}
}

func (w winHelpTypeDo) Last() (*model.WinHelpType, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinHelpType), nil
	}
}

func (w winHelpTypeDo) Find() ([]*model.WinHelpType, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinHelpType), err
}

func (w winHelpTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinHelpType, err error) {
	buf := make([]*model.WinHelpType, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winHelpTypeDo) FindInBatches(result *[]*model.WinHelpType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winHelpTypeDo) Attrs(attrs ...field.AssignExpr) *winHelpTypeDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winHelpTypeDo) Assign(attrs ...field.AssignExpr) *winHelpTypeDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winHelpTypeDo) Joins(fields ...field.RelationField) *winHelpTypeDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winHelpTypeDo) Preload(fields ...field.RelationField) *winHelpTypeDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winHelpTypeDo) FirstOrInit() (*model.WinHelpType, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinHelpType), nil
	}
}

func (w winHelpTypeDo) FirstOrCreate() (*model.WinHelpType, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinHelpType), nil
	}
}

func (w winHelpTypeDo) FindByPage(offset int, limit int) (result []*model.WinHelpType, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winHelpTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winHelpTypeDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winHelpTypeDo) Delete(models ...*model.WinHelpType) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winHelpTypeDo) withDO(do gen.Dao) *winHelpTypeDo {
	w.DO = *do.(*gen.DO)
	return w
}
