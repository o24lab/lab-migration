// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package oldmain

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"migration/pkg/model"
)

func newUserRankReport(db *gorm.DB, opts ...gen.DOOption) userRankReport {
	_userRankReport := userRankReport{}

	_userRankReport.userRankReportDo.UseDB(db, opts...)
	_userRankReport.userRankReportDo.UseModel(&model.UserRankReport{})

	tableName := _userRankReport.userRankReportDo.TableName()
	_userRankReport.ALL = field.NewAsterisk(tableName)
	_userRankReport.ID = field.NewInt32(tableName, "id")
	_userRankReport.AgentID = field.NewInt32(tableName, "agent_id")
	_userRankReport.UID = field.NewInt32(tableName, "uid")
	_userRankReport.SortType = field.NewInt32(tableName, "sort_type")
	_userRankReport.Username = field.NewString(tableName, "username")
	_userRankReport.DepositAmount = field.NewFloat64(tableName, "deposit_amount")
	_userRankReport.WithdrawalAmount = field.NewFloat64(tableName, "withdrawal_amount")
	_userRankReport.BetAmount = field.NewFloat64(tableName, "bet_amount")
	_userRankReport.PayoutAmount = field.NewFloat64(tableName, "payout_amount")
	_userRankReport.ProfitAmount = field.NewFloat64(tableName, "profit_amount")
	_userRankReport.ReportDate = field.NewInt32(tableName, "report_date")
	_userRankReport.CreatedAt = field.NewInt32(tableName, "created_at")
	_userRankReport.UpdatedAt = field.NewInt32(tableName, "updated_at")

	_userRankReport.fillFieldMap()

	return _userRankReport
}

// userRankReport 代理:玩家排行報表
type userRankReport struct {
	userRankReportDo

	ALL              field.Asterisk
	ID               field.Int32   // id
	AgentID          field.Int32   // 代理uid
	UID              field.Int32   // 用戶uid
	SortType         field.Int32   // 0:盈虧,1:投注,2:派彩,3:充值,4:提現
	Username         field.String  // 用戶名
	DepositAmount    field.Float64 // 存款金额
	WithdrawalAmount field.Float64 // 提款金额
	BetAmount        field.Float64 // 投注金额
	PayoutAmount     field.Float64 // 派彩金额
	ProfitAmount     field.Float64 // 盈虧金额
	ReportDate       field.Int32   // 報表日期
	CreatedAt        field.Int32   // 創建時間
	UpdatedAt        field.Int32   // 更新時間

	fieldMap map[string]field.Expr
}

func (u userRankReport) Table(newTableName string) *userRankReport {
	u.userRankReportDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userRankReport) As(alias string) *userRankReport {
	u.userRankReportDo.DO = *(u.userRankReportDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userRankReport) updateTableName(table string) *userRankReport {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.AgentID = field.NewInt32(table, "agent_id")
	u.UID = field.NewInt32(table, "uid")
	u.SortType = field.NewInt32(table, "sort_type")
	u.Username = field.NewString(table, "username")
	u.DepositAmount = field.NewFloat64(table, "deposit_amount")
	u.WithdrawalAmount = field.NewFloat64(table, "withdrawal_amount")
	u.BetAmount = field.NewFloat64(table, "bet_amount")
	u.PayoutAmount = field.NewFloat64(table, "payout_amount")
	u.ProfitAmount = field.NewFloat64(table, "profit_amount")
	u.ReportDate = field.NewInt32(table, "report_date")
	u.CreatedAt = field.NewInt32(table, "created_at")
	u.UpdatedAt = field.NewInt32(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userRankReport) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userRankReport) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 13)
	u.fieldMap["id"] = u.ID
	u.fieldMap["agent_id"] = u.AgentID
	u.fieldMap["uid"] = u.UID
	u.fieldMap["sort_type"] = u.SortType
	u.fieldMap["username"] = u.Username
	u.fieldMap["deposit_amount"] = u.DepositAmount
	u.fieldMap["withdrawal_amount"] = u.WithdrawalAmount
	u.fieldMap["bet_amount"] = u.BetAmount
	u.fieldMap["payout_amount"] = u.PayoutAmount
	u.fieldMap["profit_amount"] = u.ProfitAmount
	u.fieldMap["report_date"] = u.ReportDate
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userRankReport) clone(db *gorm.DB) userRankReport {
	u.userRankReportDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userRankReport) replaceDB(db *gorm.DB) userRankReport {
	u.userRankReportDo.ReplaceDB(db)
	return u
}

type userRankReportDo struct{ gen.DO }

func (u userRankReportDo) Debug() *userRankReportDo {
	return u.withDO(u.DO.Debug())
}

func (u userRankReportDo) WithContext(ctx context.Context) *userRankReportDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userRankReportDo) ReadDB() *userRankReportDo {
	return u.Clauses(dbresolver.Read)
}

func (u userRankReportDo) WriteDB() *userRankReportDo {
	return u.Clauses(dbresolver.Write)
}

func (u userRankReportDo) Session(config *gorm.Session) *userRankReportDo {
	return u.withDO(u.DO.Session(config))
}

func (u userRankReportDo) Clauses(conds ...clause.Expression) *userRankReportDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userRankReportDo) Returning(value interface{}, columns ...string) *userRankReportDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userRankReportDo) Not(conds ...gen.Condition) *userRankReportDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userRankReportDo) Or(conds ...gen.Condition) *userRankReportDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userRankReportDo) Select(conds ...field.Expr) *userRankReportDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userRankReportDo) Where(conds ...gen.Condition) *userRankReportDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userRankReportDo) Order(conds ...field.Expr) *userRankReportDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userRankReportDo) Distinct(cols ...field.Expr) *userRankReportDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userRankReportDo) Omit(cols ...field.Expr) *userRankReportDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userRankReportDo) Join(table schema.Tabler, on ...field.Expr) *userRankReportDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userRankReportDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userRankReportDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userRankReportDo) RightJoin(table schema.Tabler, on ...field.Expr) *userRankReportDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userRankReportDo) Group(cols ...field.Expr) *userRankReportDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userRankReportDo) Having(conds ...gen.Condition) *userRankReportDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userRankReportDo) Limit(limit int) *userRankReportDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userRankReportDo) Offset(offset int) *userRankReportDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userRankReportDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userRankReportDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userRankReportDo) Unscoped() *userRankReportDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userRankReportDo) Create(values ...*model.UserRankReport) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userRankReportDo) CreateInBatches(values []*model.UserRankReport, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userRankReportDo) Save(values ...*model.UserRankReport) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userRankReportDo) First() (*model.UserRankReport, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRankReport), nil
	}
}

func (u userRankReportDo) Take() (*model.UserRankReport, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRankReport), nil
	}
}

func (u userRankReportDo) Last() (*model.UserRankReport, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRankReport), nil
	}
}

func (u userRankReportDo) Find() ([]*model.UserRankReport, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserRankReport), err
}

func (u userRankReportDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRankReport, err error) {
	buf := make([]*model.UserRankReport, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userRankReportDo) FindInBatches(result *[]*model.UserRankReport, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userRankReportDo) Attrs(attrs ...field.AssignExpr) *userRankReportDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userRankReportDo) Assign(attrs ...field.AssignExpr) *userRankReportDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userRankReportDo) Joins(fields ...field.RelationField) *userRankReportDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userRankReportDo) Preload(fields ...field.RelationField) *userRankReportDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userRankReportDo) FirstOrInit() (*model.UserRankReport, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRankReport), nil
	}
}

func (u userRankReportDo) FirstOrCreate() (*model.UserRankReport, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRankReport), nil
	}
}

func (u userRankReportDo) FindByPage(offset int, limit int) (result []*model.UserRankReport, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userRankReportDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userRankReportDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userRankReportDo) Delete(models ...*model.UserRankReport) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userRankReportDo) withDO(do gen.Dao) *userRankReportDo {
	u.DO = *do.(*gen.DO)
	return u
}
