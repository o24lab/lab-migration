// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package oldmain

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"migration/pkg/model"
)

func newWinAuthGroup(db *gorm.DB, opts ...gen.DOOption) winAuthGroup {
	_winAuthGroup := winAuthGroup{}

	_winAuthGroup.winAuthGroupDo.UseDB(db, opts...)
	_winAuthGroup.winAuthGroupDo.UseModel(&model.WinAuthGroup{})

	tableName := _winAuthGroup.winAuthGroupDo.TableName()
	_winAuthGroup.ALL = field.NewAsterisk(tableName)
	_winAuthGroup.ID = field.NewInt32(tableName, "id")
	_winAuthGroup.AdminGroupID = field.NewInt32(tableName, "admin_group_id")
	_winAuthGroup.Pid = field.NewInt32(tableName, "pid")
	_winAuthGroup.Parent = field.NewInt32(tableName, "parent")
	_winAuthGroup.Title = field.NewString(tableName, "title")
	_winAuthGroup.Status = field.NewInt32(tableName, "status")
	_winAuthGroup.Rules = field.NewString(tableName, "rules")
	_winAuthGroup.OperateID = field.NewInt32(tableName, "operate_id")
	_winAuthGroup.DataPermission = field.NewString(tableName, "data_permission")
	_winAuthGroup.CreatedAt = field.NewInt32(tableName, "created_at")
	_winAuthGroup.UpdatedAt = field.NewInt32(tableName, "updated_at")

	_winAuthGroup.fillFieldMap()

	return _winAuthGroup
}

// winAuthGroup 角色表
type winAuthGroup struct {
	winAuthGroupDo

	ALL            field.Asterisk
	ID             field.Int32
	AdminGroupID   field.Int32  // 角色组ID
	Pid            field.Int32  // 父类ID
	Parent         field.Int32  // 创建人
	Title          field.String // 角色名
	Status         field.Int32  // 状态: 1-启用 0-冻结
	Rules          field.String // 菜单ID集合
	OperateID      field.Int32  // 用户组ID
	DataPermission field.String // 数据权限
	CreatedAt      field.Int32
	UpdatedAt      field.Int32

	fieldMap map[string]field.Expr
}

func (w winAuthGroup) Table(newTableName string) *winAuthGroup {
	w.winAuthGroupDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winAuthGroup) As(alias string) *winAuthGroup {
	w.winAuthGroupDo.DO = *(w.winAuthGroupDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winAuthGroup) updateTableName(table string) *winAuthGroup {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt32(table, "id")
	w.AdminGroupID = field.NewInt32(table, "admin_group_id")
	w.Pid = field.NewInt32(table, "pid")
	w.Parent = field.NewInt32(table, "parent")
	w.Title = field.NewString(table, "title")
	w.Status = field.NewInt32(table, "status")
	w.Rules = field.NewString(table, "rules")
	w.OperateID = field.NewInt32(table, "operate_id")
	w.DataPermission = field.NewString(table, "data_permission")
	w.CreatedAt = field.NewInt32(table, "created_at")
	w.UpdatedAt = field.NewInt32(table, "updated_at")

	w.fillFieldMap()

	return w
}

func (w *winAuthGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winAuthGroup) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 11)
	w.fieldMap["id"] = w.ID
	w.fieldMap["admin_group_id"] = w.AdminGroupID
	w.fieldMap["pid"] = w.Pid
	w.fieldMap["parent"] = w.Parent
	w.fieldMap["title"] = w.Title
	w.fieldMap["status"] = w.Status
	w.fieldMap["rules"] = w.Rules
	w.fieldMap["operate_id"] = w.OperateID
	w.fieldMap["data_permission"] = w.DataPermission
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
}

func (w winAuthGroup) clone(db *gorm.DB) winAuthGroup {
	w.winAuthGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winAuthGroup) replaceDB(db *gorm.DB) winAuthGroup {
	w.winAuthGroupDo.ReplaceDB(db)
	return w
}

type winAuthGroupDo struct{ gen.DO }

func (w winAuthGroupDo) Debug() *winAuthGroupDo {
	return w.withDO(w.DO.Debug())
}

func (w winAuthGroupDo) WithContext(ctx context.Context) *winAuthGroupDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winAuthGroupDo) ReadDB() *winAuthGroupDo {
	return w.Clauses(dbresolver.Read)
}

func (w winAuthGroupDo) WriteDB() *winAuthGroupDo {
	return w.Clauses(dbresolver.Write)
}

func (w winAuthGroupDo) Session(config *gorm.Session) *winAuthGroupDo {
	return w.withDO(w.DO.Session(config))
}

func (w winAuthGroupDo) Clauses(conds ...clause.Expression) *winAuthGroupDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winAuthGroupDo) Returning(value interface{}, columns ...string) *winAuthGroupDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winAuthGroupDo) Not(conds ...gen.Condition) *winAuthGroupDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winAuthGroupDo) Or(conds ...gen.Condition) *winAuthGroupDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winAuthGroupDo) Select(conds ...field.Expr) *winAuthGroupDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winAuthGroupDo) Where(conds ...gen.Condition) *winAuthGroupDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winAuthGroupDo) Order(conds ...field.Expr) *winAuthGroupDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winAuthGroupDo) Distinct(cols ...field.Expr) *winAuthGroupDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winAuthGroupDo) Omit(cols ...field.Expr) *winAuthGroupDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winAuthGroupDo) Join(table schema.Tabler, on ...field.Expr) *winAuthGroupDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winAuthGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) *winAuthGroupDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winAuthGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) *winAuthGroupDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winAuthGroupDo) Group(cols ...field.Expr) *winAuthGroupDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winAuthGroupDo) Having(conds ...gen.Condition) *winAuthGroupDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winAuthGroupDo) Limit(limit int) *winAuthGroupDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winAuthGroupDo) Offset(offset int) *winAuthGroupDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winAuthGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *winAuthGroupDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winAuthGroupDo) Unscoped() *winAuthGroupDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winAuthGroupDo) Create(values ...*model.WinAuthGroup) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winAuthGroupDo) CreateInBatches(values []*model.WinAuthGroup, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winAuthGroupDo) Save(values ...*model.WinAuthGroup) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winAuthGroupDo) First() (*model.WinAuthGroup, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinAuthGroup), nil
	}
}

func (w winAuthGroupDo) Take() (*model.WinAuthGroup, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinAuthGroup), nil
	}
}

func (w winAuthGroupDo) Last() (*model.WinAuthGroup, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinAuthGroup), nil
	}
}

func (w winAuthGroupDo) Find() ([]*model.WinAuthGroup, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinAuthGroup), err
}

func (w winAuthGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinAuthGroup, err error) {
	buf := make([]*model.WinAuthGroup, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winAuthGroupDo) FindInBatches(result *[]*model.WinAuthGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winAuthGroupDo) Attrs(attrs ...field.AssignExpr) *winAuthGroupDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winAuthGroupDo) Assign(attrs ...field.AssignExpr) *winAuthGroupDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winAuthGroupDo) Joins(fields ...field.RelationField) *winAuthGroupDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winAuthGroupDo) Preload(fields ...field.RelationField) *winAuthGroupDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winAuthGroupDo) FirstOrInit() (*model.WinAuthGroup, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinAuthGroup), nil
	}
}

func (w winAuthGroupDo) FirstOrCreate() (*model.WinAuthGroup, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinAuthGroup), nil
	}
}

func (w winAuthGroupDo) FindByPage(offset int, limit int) (result []*model.WinAuthGroup, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winAuthGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winAuthGroupDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winAuthGroupDo) Delete(models ...*model.WinAuthGroup) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winAuthGroupDo) withDO(do gen.Dao) *winAuthGroupDo {
	w.DO = *do.(*gen.DO)
	return w
}
