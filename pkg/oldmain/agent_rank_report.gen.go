// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package oldmain

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"migration/pkg/model"
)

func newAgentRankReport(db *gorm.DB, opts ...gen.DOOption) agentRankReport {
	_agentRankReport := agentRankReport{}

	_agentRankReport.agentRankReportDo.UseDB(db, opts...)
	_agentRankReport.agentRankReportDo.UseModel(&model.AgentRankReport{})

	tableName := _agentRankReport.agentRankReportDo.TableName()
	_agentRankReport.ALL = field.NewAsterisk(tableName)
	_agentRankReport.ID = field.NewInt32(tableName, "id")
	_agentRankReport.AgentID = field.NewInt32(tableName, "agent_id")
	_agentRankReport.SortType = field.NewInt32(tableName, "sort_type")
	_agentRankReport.Username = field.NewString(tableName, "username")
	_agentRankReport.DepositAmount = field.NewFloat64(tableName, "deposit_amount")
	_agentRankReport.WithdrawalAmount = field.NewFloat64(tableName, "withdrawal_amount")
	_agentRankReport.BetAmount = field.NewFloat64(tableName, "bet_amount")
	_agentRankReport.PayoutAmount = field.NewFloat64(tableName, "payout_amount")
	_agentRankReport.ProfitAmount = field.NewFloat64(tableName, "profit_amount")
	_agentRankReport.ReportDate = field.NewInt32(tableName, "report_date")
	_agentRankReport.CreatedAt = field.NewInt32(tableName, "created_at")
	_agentRankReport.UpdatedAt = field.NewInt32(tableName, "updated_at")

	_agentRankReport.fillFieldMap()

	return _agentRankReport
}

// agentRankReport 代理:代理排行報表
type agentRankReport struct {
	agentRankReportDo

	ALL              field.Asterisk
	ID               field.Int32   // id
	AgentID          field.Int32   // 代理uid
	SortType         field.Int32   // 0:盈虧,1:投注,2:派彩,3:充值,4:提現
	Username         field.String  // 代理名
	DepositAmount    field.Float64 // 存款金额
	WithdrawalAmount field.Float64 // 提款金额
	BetAmount        field.Float64 // 投注金额
	PayoutAmount     field.Float64 // 派彩金额
	ProfitAmount     field.Float64 // 盈虧金额
	ReportDate       field.Int32   // 報表日期
	CreatedAt        field.Int32   // 創建時間
	UpdatedAt        field.Int32   // 更新時間

	fieldMap map[string]field.Expr
}

func (a agentRankReport) Table(newTableName string) *agentRankReport {
	a.agentRankReportDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a agentRankReport) As(alias string) *agentRankReport {
	a.agentRankReportDo.DO = *(a.agentRankReportDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *agentRankReport) updateTableName(table string) *agentRankReport {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt32(table, "id")
	a.AgentID = field.NewInt32(table, "agent_id")
	a.SortType = field.NewInt32(table, "sort_type")
	a.Username = field.NewString(table, "username")
	a.DepositAmount = field.NewFloat64(table, "deposit_amount")
	a.WithdrawalAmount = field.NewFloat64(table, "withdrawal_amount")
	a.BetAmount = field.NewFloat64(table, "bet_amount")
	a.PayoutAmount = field.NewFloat64(table, "payout_amount")
	a.ProfitAmount = field.NewFloat64(table, "profit_amount")
	a.ReportDate = field.NewInt32(table, "report_date")
	a.CreatedAt = field.NewInt32(table, "created_at")
	a.UpdatedAt = field.NewInt32(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *agentRankReport) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *agentRankReport) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 12)
	a.fieldMap["id"] = a.ID
	a.fieldMap["agent_id"] = a.AgentID
	a.fieldMap["sort_type"] = a.SortType
	a.fieldMap["username"] = a.Username
	a.fieldMap["deposit_amount"] = a.DepositAmount
	a.fieldMap["withdrawal_amount"] = a.WithdrawalAmount
	a.fieldMap["bet_amount"] = a.BetAmount
	a.fieldMap["payout_amount"] = a.PayoutAmount
	a.fieldMap["profit_amount"] = a.ProfitAmount
	a.fieldMap["report_date"] = a.ReportDate
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a agentRankReport) clone(db *gorm.DB) agentRankReport {
	a.agentRankReportDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a agentRankReport) replaceDB(db *gorm.DB) agentRankReport {
	a.agentRankReportDo.ReplaceDB(db)
	return a
}

type agentRankReportDo struct{ gen.DO }

func (a agentRankReportDo) Debug() *agentRankReportDo {
	return a.withDO(a.DO.Debug())
}

func (a agentRankReportDo) WithContext(ctx context.Context) *agentRankReportDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a agentRankReportDo) ReadDB() *agentRankReportDo {
	return a.Clauses(dbresolver.Read)
}

func (a agentRankReportDo) WriteDB() *agentRankReportDo {
	return a.Clauses(dbresolver.Write)
}

func (a agentRankReportDo) Session(config *gorm.Session) *agentRankReportDo {
	return a.withDO(a.DO.Session(config))
}

func (a agentRankReportDo) Clauses(conds ...clause.Expression) *agentRankReportDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a agentRankReportDo) Returning(value interface{}, columns ...string) *agentRankReportDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a agentRankReportDo) Not(conds ...gen.Condition) *agentRankReportDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a agentRankReportDo) Or(conds ...gen.Condition) *agentRankReportDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a agentRankReportDo) Select(conds ...field.Expr) *agentRankReportDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a agentRankReportDo) Where(conds ...gen.Condition) *agentRankReportDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a agentRankReportDo) Order(conds ...field.Expr) *agentRankReportDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a agentRankReportDo) Distinct(cols ...field.Expr) *agentRankReportDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a agentRankReportDo) Omit(cols ...field.Expr) *agentRankReportDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a agentRankReportDo) Join(table schema.Tabler, on ...field.Expr) *agentRankReportDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a agentRankReportDo) LeftJoin(table schema.Tabler, on ...field.Expr) *agentRankReportDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a agentRankReportDo) RightJoin(table schema.Tabler, on ...field.Expr) *agentRankReportDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a agentRankReportDo) Group(cols ...field.Expr) *agentRankReportDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a agentRankReportDo) Having(conds ...gen.Condition) *agentRankReportDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a agentRankReportDo) Limit(limit int) *agentRankReportDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a agentRankReportDo) Offset(offset int) *agentRankReportDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a agentRankReportDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *agentRankReportDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a agentRankReportDo) Unscoped() *agentRankReportDo {
	return a.withDO(a.DO.Unscoped())
}

func (a agentRankReportDo) Create(values ...*model.AgentRankReport) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a agentRankReportDo) CreateInBatches(values []*model.AgentRankReport, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a agentRankReportDo) Save(values ...*model.AgentRankReport) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a agentRankReportDo) First() (*model.AgentRankReport, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentRankReport), nil
	}
}

func (a agentRankReportDo) Take() (*model.AgentRankReport, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentRankReport), nil
	}
}

func (a agentRankReportDo) Last() (*model.AgentRankReport, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentRankReport), nil
	}
}

func (a agentRankReportDo) Find() ([]*model.AgentRankReport, error) {
	result, err := a.DO.Find()
	return result.([]*model.AgentRankReport), err
}

func (a agentRankReportDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentRankReport, err error) {
	buf := make([]*model.AgentRankReport, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a agentRankReportDo) FindInBatches(result *[]*model.AgentRankReport, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a agentRankReportDo) Attrs(attrs ...field.AssignExpr) *agentRankReportDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a agentRankReportDo) Assign(attrs ...field.AssignExpr) *agentRankReportDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a agentRankReportDo) Joins(fields ...field.RelationField) *agentRankReportDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a agentRankReportDo) Preload(fields ...field.RelationField) *agentRankReportDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a agentRankReportDo) FirstOrInit() (*model.AgentRankReport, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentRankReport), nil
	}
}

func (a agentRankReportDo) FirstOrCreate() (*model.AgentRankReport, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentRankReport), nil
	}
}

func (a agentRankReportDo) FindByPage(offset int, limit int) (result []*model.AgentRankReport, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a agentRankReportDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a agentRankReportDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a agentRankReportDo) Delete(models ...*model.AgentRankReport) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *agentRankReportDo) withDO(do gen.Dao) *agentRankReportDo {
	a.DO = *do.(*gen.DO)
	return a
}
