// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package oldmain

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"migration/pkg/model"
)

func newEVoucher(db *gorm.DB, opts ...gen.DOOption) eVoucher {
	_eVoucher := eVoucher{}

	_eVoucher.eVoucherDo.UseDB(db, opts...)
	_eVoucher.eVoucherDo.UseModel(&model.EVoucher{})

	tableName := _eVoucher.eVoucherDo.TableName()
	_eVoucher.ALL = field.NewAsterisk(tableName)
	_eVoucher.ID = field.NewInt32(tableName, "id")
	_eVoucher.VoucherType = field.NewString(tableName, "voucher_type")
	_eVoucher.VoucherCode = field.NewString(tableName, "voucher_code")
	_eVoucher.VoucherName = field.NewString(tableName, "voucher_name")
	_eVoucher.OrderID = field.NewInt64(tableName, "order_id")
	_eVoucher.ProductID = field.NewString(tableName, "product_id")
	_eVoucher.BuyerID = field.NewInt64(tableName, "buyer_id")
	_eVoucher.PaymentTime = field.NewInt64(tableName, "payment_time")
	_eVoucher.PaidPrice = field.NewFloat64(tableName, "paid_price")
	_eVoucher.ItemPrice = field.NewFloat64(tableName, "item_price")
	_eVoucher.Currency = field.NewString(tableName, "currency")
	_eVoucher.DigitalDeliveryInfo = field.NewString(tableName, "digital_delivery_info")
	_eVoucher.ProductDetailURL = field.NewString(tableName, "product_detail_url")
	_eVoucher.IsUsed = field.NewInt32(tableName, "is_used")
	_eVoucher.UserID = field.NewInt32(tableName, "user_id")
	_eVoucher.Username = field.NewString(tableName, "username")
	_eVoucher.CreatedAt = field.NewInt64(tableName, "created_at")

	_eVoucher.fillFieldMap()

	return _eVoucher
}

// eVoucher 电子优惠券
type eVoucher struct {
	eVoucherDo

	ALL                 field.Asterisk
	ID                  field.Int32   // 主键ID
	VoucherType         field.String  // 类型: lazada,shopee
	VoucherCode         field.String  // 优惠码
	VoucherName         field.String  // 优惠名称
	OrderID             field.Int64   // 优惠订单ID
	ProductID           field.String  // 优惠产品ID
	BuyerID             field.Int64   // 买方ID
	PaymentTime         field.Int64   // 买方支付时间
	PaidPrice           field.Float64 // 已支付金额
	ItemPrice           field.Float64 // 商品金额
	Currency            field.String  // 币种
	DigitalDeliveryInfo field.String  // 运输信息
	ProductDetailURL    field.String  // 产品详情地址
	IsUsed              field.Int32   // 是否使用, 0: 未使用, 1: 已使用
	UserID              field.Int32   // Filbet用户ID
	Username            field.String  // Filbet用户名
	CreatedAt           field.Int64   // 创建时间

	fieldMap map[string]field.Expr
}

func (e eVoucher) Table(newTableName string) *eVoucher {
	e.eVoucherDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e eVoucher) As(alias string) *eVoucher {
	e.eVoucherDo.DO = *(e.eVoucherDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *eVoucher) updateTableName(table string) *eVoucher {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.VoucherType = field.NewString(table, "voucher_type")
	e.VoucherCode = field.NewString(table, "voucher_code")
	e.VoucherName = field.NewString(table, "voucher_name")
	e.OrderID = field.NewInt64(table, "order_id")
	e.ProductID = field.NewString(table, "product_id")
	e.BuyerID = field.NewInt64(table, "buyer_id")
	e.PaymentTime = field.NewInt64(table, "payment_time")
	e.PaidPrice = field.NewFloat64(table, "paid_price")
	e.ItemPrice = field.NewFloat64(table, "item_price")
	e.Currency = field.NewString(table, "currency")
	e.DigitalDeliveryInfo = field.NewString(table, "digital_delivery_info")
	e.ProductDetailURL = field.NewString(table, "product_detail_url")
	e.IsUsed = field.NewInt32(table, "is_used")
	e.UserID = field.NewInt32(table, "user_id")
	e.Username = field.NewString(table, "username")
	e.CreatedAt = field.NewInt64(table, "created_at")

	e.fillFieldMap()

	return e
}

func (e *eVoucher) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *eVoucher) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 17)
	e.fieldMap["id"] = e.ID
	e.fieldMap["voucher_type"] = e.VoucherType
	e.fieldMap["voucher_code"] = e.VoucherCode
	e.fieldMap["voucher_name"] = e.VoucherName
	e.fieldMap["order_id"] = e.OrderID
	e.fieldMap["product_id"] = e.ProductID
	e.fieldMap["buyer_id"] = e.BuyerID
	e.fieldMap["payment_time"] = e.PaymentTime
	e.fieldMap["paid_price"] = e.PaidPrice
	e.fieldMap["item_price"] = e.ItemPrice
	e.fieldMap["currency"] = e.Currency
	e.fieldMap["digital_delivery_info"] = e.DigitalDeliveryInfo
	e.fieldMap["product_detail_url"] = e.ProductDetailURL
	e.fieldMap["is_used"] = e.IsUsed
	e.fieldMap["user_id"] = e.UserID
	e.fieldMap["username"] = e.Username
	e.fieldMap["created_at"] = e.CreatedAt
}

func (e eVoucher) clone(db *gorm.DB) eVoucher {
	e.eVoucherDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e eVoucher) replaceDB(db *gorm.DB) eVoucher {
	e.eVoucherDo.ReplaceDB(db)
	return e
}

type eVoucherDo struct{ gen.DO }

func (e eVoucherDo) Debug() *eVoucherDo {
	return e.withDO(e.DO.Debug())
}

func (e eVoucherDo) WithContext(ctx context.Context) *eVoucherDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e eVoucherDo) ReadDB() *eVoucherDo {
	return e.Clauses(dbresolver.Read)
}

func (e eVoucherDo) WriteDB() *eVoucherDo {
	return e.Clauses(dbresolver.Write)
}

func (e eVoucherDo) Session(config *gorm.Session) *eVoucherDo {
	return e.withDO(e.DO.Session(config))
}

func (e eVoucherDo) Clauses(conds ...clause.Expression) *eVoucherDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e eVoucherDo) Returning(value interface{}, columns ...string) *eVoucherDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e eVoucherDo) Not(conds ...gen.Condition) *eVoucherDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e eVoucherDo) Or(conds ...gen.Condition) *eVoucherDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e eVoucherDo) Select(conds ...field.Expr) *eVoucherDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e eVoucherDo) Where(conds ...gen.Condition) *eVoucherDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e eVoucherDo) Order(conds ...field.Expr) *eVoucherDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e eVoucherDo) Distinct(cols ...field.Expr) *eVoucherDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e eVoucherDo) Omit(cols ...field.Expr) *eVoucherDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e eVoucherDo) Join(table schema.Tabler, on ...field.Expr) *eVoucherDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e eVoucherDo) LeftJoin(table schema.Tabler, on ...field.Expr) *eVoucherDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e eVoucherDo) RightJoin(table schema.Tabler, on ...field.Expr) *eVoucherDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e eVoucherDo) Group(cols ...field.Expr) *eVoucherDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e eVoucherDo) Having(conds ...gen.Condition) *eVoucherDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e eVoucherDo) Limit(limit int) *eVoucherDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e eVoucherDo) Offset(offset int) *eVoucherDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e eVoucherDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *eVoucherDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e eVoucherDo) Unscoped() *eVoucherDo {
	return e.withDO(e.DO.Unscoped())
}

func (e eVoucherDo) Create(values ...*model.EVoucher) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e eVoucherDo) CreateInBatches(values []*model.EVoucher, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e eVoucherDo) Save(values ...*model.EVoucher) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e eVoucherDo) First() (*model.EVoucher, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EVoucher), nil
	}
}

func (e eVoucherDo) Take() (*model.EVoucher, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EVoucher), nil
	}
}

func (e eVoucherDo) Last() (*model.EVoucher, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EVoucher), nil
	}
}

func (e eVoucherDo) Find() ([]*model.EVoucher, error) {
	result, err := e.DO.Find()
	return result.([]*model.EVoucher), err
}

func (e eVoucherDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EVoucher, err error) {
	buf := make([]*model.EVoucher, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e eVoucherDo) FindInBatches(result *[]*model.EVoucher, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e eVoucherDo) Attrs(attrs ...field.AssignExpr) *eVoucherDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e eVoucherDo) Assign(attrs ...field.AssignExpr) *eVoucherDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e eVoucherDo) Joins(fields ...field.RelationField) *eVoucherDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e eVoucherDo) Preload(fields ...field.RelationField) *eVoucherDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e eVoucherDo) FirstOrInit() (*model.EVoucher, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EVoucher), nil
	}
}

func (e eVoucherDo) FirstOrCreate() (*model.EVoucher, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EVoucher), nil
	}
}

func (e eVoucherDo) FindByPage(offset int, limit int) (result []*model.EVoucher, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e eVoucherDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e eVoucherDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e eVoucherDo) Delete(models ...*model.EVoucher) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *eVoucherDo) withDO(do gen.Dao) *eVoucherDo {
	e.DO = *do.(*gen.DO)
	return e
}
