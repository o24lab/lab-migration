// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package oldsharding

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                  = new(Query)
	WinBetslips        *winBetslips
	WinBetslipsDetails *winBetslipsDetails
	WinCoinLog         *winCoinLog
	WinUserWallet      *winUserWallet
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	WinBetslips = &Q.WinBetslips
	WinBetslipsDetails = &Q.WinBetslipsDetails
	WinCoinLog = &Q.WinCoinLog
	WinUserWallet = &Q.WinUserWallet
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                 db,
		WinBetslips:        newWinBetslips(db, opts...),
		WinBetslipsDetails: newWinBetslipsDetails(db, opts...),
		WinCoinLog:         newWinCoinLog(db, opts...),
		WinUserWallet:      newWinUserWallet(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	WinBetslips        winBetslips
	WinBetslipsDetails winBetslipsDetails
	WinCoinLog         winCoinLog
	WinUserWallet      winUserWallet
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                 db,
		WinBetslips:        q.WinBetslips.clone(db),
		WinBetslipsDetails: q.WinBetslipsDetails.clone(db),
		WinCoinLog:         q.WinCoinLog.clone(db),
		WinUserWallet:      q.WinUserWallet.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                 db,
		WinBetslips:        q.WinBetslips.replaceDB(db),
		WinBetslipsDetails: q.WinBetslipsDetails.replaceDB(db),
		WinCoinLog:         q.WinCoinLog.replaceDB(db),
		WinUserWallet:      q.WinUserWallet.replaceDB(db),
	}
}

type queryCtx struct {
	WinBetslips        *winBetslipsDo
	WinBetslipsDetails *winBetslipsDetailsDo
	WinCoinLog         *winCoinLogDo
	WinUserWallet      *winUserWalletDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		WinBetslips:        q.WinBetslips.WithContext(ctx),
		WinBetslipsDetails: q.WinBetslipsDetails.WithContext(ctx),
		WinCoinLog:         q.WinCoinLog.WithContext(ctx),
		WinUserWallet:      q.WinUserWallet.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
