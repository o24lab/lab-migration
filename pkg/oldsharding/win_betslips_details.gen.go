// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package oldsharding

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"migration/pkg/model"
)

func newWinBetslipsDetails(db *gorm.DB, opts ...gen.DOOption) winBetslipsDetails {
	_winBetslipsDetails := winBetslipsDetails{}

	_winBetslipsDetails.winBetslipsDetailsDo.UseDB(db, opts...)
	_winBetslipsDetails.winBetslipsDetailsDo.UseModel(&model.WinBetslipsDetails{})

	tableName := _winBetslipsDetails.winBetslipsDetailsDo.TableName()
	_winBetslipsDetails.ALL = field.NewAsterisk(tableName)
	_winBetslipsDetails.ID = field.NewInt64(tableName, "id")
	_winBetslipsDetails.XbUID = field.NewInt32(tableName, "xb_uid")
	_winBetslipsDetails.XbUsername = field.NewString(tableName, "xb_username")
	_winBetslipsDetails.BetJSON = field.NewString(tableName, "bet_json")
	_winBetslipsDetails.RewardJSON = field.NewString(tableName, "reward_json")
	_winBetslipsDetails.RefundJSON = field.NewString(tableName, "refund_json")

	_winBetslipsDetails.fillFieldMap()

	return _winBetslipsDetails
}

type winBetslipsDetails struct {
	winBetslipsDetailsDo

	ALL        field.Asterisk
	ID         field.Int64  // 主键-同注单表一致
	XbUID      field.Int32  // 对应user表id
	XbUsername field.String // 对应user表username
	BetJSON    field.String // 投注原始json
	RewardJSON field.String // 开彩原始json
	RefundJSON field.String // 退款原始json

	fieldMap map[string]field.Expr
}

func (w winBetslipsDetails) Table(newTableName string) *winBetslipsDetails {
	w.winBetslipsDetailsDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winBetslipsDetails) As(alias string) *winBetslipsDetails {
	w.winBetslipsDetailsDo.DO = *(w.winBetslipsDetailsDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winBetslipsDetails) updateTableName(table string) *winBetslipsDetails {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.XbUID = field.NewInt32(table, "xb_uid")
	w.XbUsername = field.NewString(table, "xb_username")
	w.BetJSON = field.NewString(table, "bet_json")
	w.RewardJSON = field.NewString(table, "reward_json")
	w.RefundJSON = field.NewString(table, "refund_json")

	w.fillFieldMap()

	return w
}

func (w *winBetslipsDetails) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winBetslipsDetails) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 6)
	w.fieldMap["id"] = w.ID
	w.fieldMap["xb_uid"] = w.XbUID
	w.fieldMap["xb_username"] = w.XbUsername
	w.fieldMap["bet_json"] = w.BetJSON
	w.fieldMap["reward_json"] = w.RewardJSON
	w.fieldMap["refund_json"] = w.RefundJSON
}

func (w winBetslipsDetails) clone(db *gorm.DB) winBetslipsDetails {
	w.winBetslipsDetailsDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winBetslipsDetails) replaceDB(db *gorm.DB) winBetslipsDetails {
	w.winBetslipsDetailsDo.ReplaceDB(db)
	return w
}

type winBetslipsDetailsDo struct{ gen.DO }

func (w winBetslipsDetailsDo) Debug() *winBetslipsDetailsDo {
	return w.withDO(w.DO.Debug())
}

func (w winBetslipsDetailsDo) WithContext(ctx context.Context) *winBetslipsDetailsDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winBetslipsDetailsDo) ReadDB() *winBetslipsDetailsDo {
	return w.Clauses(dbresolver.Read)
}

func (w winBetslipsDetailsDo) WriteDB() *winBetslipsDetailsDo {
	return w.Clauses(dbresolver.Write)
}

func (w winBetslipsDetailsDo) Session(config *gorm.Session) *winBetslipsDetailsDo {
	return w.withDO(w.DO.Session(config))
}

func (w winBetslipsDetailsDo) Clauses(conds ...clause.Expression) *winBetslipsDetailsDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winBetslipsDetailsDo) Returning(value interface{}, columns ...string) *winBetslipsDetailsDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winBetslipsDetailsDo) Not(conds ...gen.Condition) *winBetslipsDetailsDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winBetslipsDetailsDo) Or(conds ...gen.Condition) *winBetslipsDetailsDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winBetslipsDetailsDo) Select(conds ...field.Expr) *winBetslipsDetailsDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winBetslipsDetailsDo) Where(conds ...gen.Condition) *winBetslipsDetailsDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winBetslipsDetailsDo) Order(conds ...field.Expr) *winBetslipsDetailsDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winBetslipsDetailsDo) Distinct(cols ...field.Expr) *winBetslipsDetailsDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winBetslipsDetailsDo) Omit(cols ...field.Expr) *winBetslipsDetailsDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winBetslipsDetailsDo) Join(table schema.Tabler, on ...field.Expr) *winBetslipsDetailsDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winBetslipsDetailsDo) LeftJoin(table schema.Tabler, on ...field.Expr) *winBetslipsDetailsDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winBetslipsDetailsDo) RightJoin(table schema.Tabler, on ...field.Expr) *winBetslipsDetailsDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winBetslipsDetailsDo) Group(cols ...field.Expr) *winBetslipsDetailsDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winBetslipsDetailsDo) Having(conds ...gen.Condition) *winBetslipsDetailsDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winBetslipsDetailsDo) Limit(limit int) *winBetslipsDetailsDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winBetslipsDetailsDo) Offset(offset int) *winBetslipsDetailsDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winBetslipsDetailsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *winBetslipsDetailsDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winBetslipsDetailsDo) Unscoped() *winBetslipsDetailsDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winBetslipsDetailsDo) Create(values ...*model.WinBetslipsDetails) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winBetslipsDetailsDo) CreateInBatches(values []*model.WinBetslipsDetails, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winBetslipsDetailsDo) Save(values ...*model.WinBetslipsDetails) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winBetslipsDetailsDo) First() (*model.WinBetslipsDetails, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinBetslipsDetails), nil
	}
}

func (w winBetslipsDetailsDo) Take() (*model.WinBetslipsDetails, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinBetslipsDetails), nil
	}
}

func (w winBetslipsDetailsDo) Last() (*model.WinBetslipsDetails, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinBetslipsDetails), nil
	}
}

func (w winBetslipsDetailsDo) Find() ([]*model.WinBetslipsDetails, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinBetslipsDetails), err
}

func (w winBetslipsDetailsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinBetslipsDetails, err error) {
	buf := make([]*model.WinBetslipsDetails, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winBetslipsDetailsDo) FindInBatches(result *[]*model.WinBetslipsDetails, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winBetslipsDetailsDo) Attrs(attrs ...field.AssignExpr) *winBetslipsDetailsDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winBetslipsDetailsDo) Assign(attrs ...field.AssignExpr) *winBetslipsDetailsDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winBetslipsDetailsDo) Joins(fields ...field.RelationField) *winBetslipsDetailsDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winBetslipsDetailsDo) Preload(fields ...field.RelationField) *winBetslipsDetailsDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winBetslipsDetailsDo) FirstOrInit() (*model.WinBetslipsDetails, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinBetslipsDetails), nil
	}
}

func (w winBetslipsDetailsDo) FirstOrCreate() (*model.WinBetslipsDetails, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinBetslipsDetails), nil
	}
}

func (w winBetslipsDetailsDo) FindByPage(offset int, limit int) (result []*model.WinBetslipsDetails, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winBetslipsDetailsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winBetslipsDetailsDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winBetslipsDetailsDo) Delete(models ...*model.WinBetslipsDetails) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winBetslipsDetailsDo) withDO(do gen.Dao) *winBetslipsDetailsDo {
	w.DO = *do.(*gen.DO)
	return w
}
